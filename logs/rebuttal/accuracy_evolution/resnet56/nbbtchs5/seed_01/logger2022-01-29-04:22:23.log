01/29 04:22:23 AM | args = Namespace(output_dir='result/rebuttal/nb_epoch/resnet56/nbbtchs5/seed_01', loaded_model_path='./checkpoints/cifar10/resnet_56.pt', resume=False, test_only=False, mode='prune', batch_size=64, nb_batches=5, Mflops_target=None, lr=0.6, momentum=0.9, beta=6, gamma=0.4, gpu='0', num_workers=4, dataset='cifar10', arch='resnet_56', save_plot=False, seed=1, lr_finetuning=0.02, epoch_finetuning=200, wd=0.002, data_dir='./data/cifar10/', print_freq=200, num_classes=10, device_ids=[0], device=device(type='cuda', index=0), name_base='')
01/29 04:22:29 AM | ----------------------------------------
01/29 04:22:29 AM | ==> Building model...
01/29 04:22:29 AM | ----------------------------------------
01/29 04:22:29 AM | ==> Loading weights into the model...
01/29 04:22:29 AM | ----------------------------------------
01/29 04:22:29 AM | ResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (1): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (linear): Linear(in_features=64, out_features=10, bias=True)
)
01/29 04:22:31 AM | Save modules info...
01/29 04:22:31 AM | FLOPS pruning ratio is 0.56
01/29 04:22:31 AM | Pruning with information flow
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [1]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [1]
01/29 04:22:31 AM | cout: [1]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [1]
01/29 04:22:31 AM | cout: [1]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [1]
01/29 04:22:31 AM | cout: [2]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [2]
01/29 04:22:31 AM | cout: [2]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [3]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [3]
01/29 04:22:31 AM | cout: [3]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [3]
01/29 04:22:31 AM | cout: [3]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [3]
01/29 04:22:31 AM | cout: [4]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [4]
01/29 04:22:31 AM | cout: [4]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [5]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [5]
01/29 04:22:31 AM | cout: [5]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [5]
01/29 04:22:31 AM | cout: [5]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [5]
01/29 04:22:31 AM | cout: [6]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [6]
01/29 04:22:31 AM | cout: [6]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [7]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [7]
01/29 04:22:31 AM | cout: [7]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [7]
01/29 04:22:31 AM | cout: [7]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [7]
01/29 04:22:31 AM | cout: [8]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [8]
01/29 04:22:31 AM | cout: [8]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [9]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [9]
01/29 04:22:31 AM | cout: [9]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [9]
01/29 04:22:31 AM | cout: [9]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [9]
01/29 04:22:31 AM | cout: [10]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [10]
01/29 04:22:31 AM | cout: [10]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [11]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [11]
01/29 04:22:31 AM | cout: [11]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [11]
01/29 04:22:31 AM | cout: [11]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [11]
01/29 04:22:31 AM | cout: [12]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [12]
01/29 04:22:31 AM | cout: [12]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [13]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [13]
01/29 04:22:31 AM | cout: [13]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [13]
01/29 04:22:31 AM | cout: [13]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [13]
01/29 04:22:31 AM | cout: [14]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [14]
01/29 04:22:31 AM | cout: [14]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [15]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [15]
01/29 04:22:31 AM | cout: [15]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [15]
01/29 04:22:31 AM | cout: [15]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [15]
01/29 04:22:31 AM | cout: [16]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [16]
01/29 04:22:31 AM | cout: [16]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [17]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [17]
01/29 04:22:31 AM | cout: [17]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [17]
01/29 04:22:31 AM | cout: [17]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [17]
01/29 04:22:31 AM | cout: [18]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [18]
01/29 04:22:31 AM | cout: [18]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [19]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [19]
01/29 04:22:31 AM | cout: [19]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [19]
01/29 04:22:31 AM | cout: [19]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [19]
01/29 04:22:31 AM | cout: [20]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [20]
01/29 04:22:31 AM | cout: [20]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [21]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [21]
01/29 04:22:31 AM | cout: [21]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [21]
01/29 04:22:31 AM | cout: [21]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [21]
01/29 04:22:31 AM | cout: [22]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [22]
01/29 04:22:31 AM | cout: [22]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [23]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [23]
01/29 04:22:31 AM | cout: [23]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [23]
01/29 04:22:31 AM | cout: [23]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [23]
01/29 04:22:31 AM | cout: [24]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [24]
01/29 04:22:31 AM | cout: [24]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [25]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [25]
01/29 04:22:31 AM | cout: [25]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [25]
01/29 04:22:31 AM | cout: [25]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [25]
01/29 04:22:31 AM | cout: [26]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [26]
01/29 04:22:31 AM | cout: [26]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [27]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [27]
01/29 04:22:31 AM | cout: [27]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [27]
01/29 04:22:31 AM | cout: [27]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [27]
01/29 04:22:31 AM | cout: [28]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [28]
01/29 04:22:31 AM | cout: [28]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [29]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [29]
01/29 04:22:31 AM | cout: [29]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [29]
01/29 04:22:31 AM | cout: [29]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [29]
01/29 04:22:31 AM | cout: [30]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [30]
01/29 04:22:31 AM | cout: [30]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [31]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [31]
01/29 04:22:31 AM | cout: [31]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [31]
01/29 04:22:31 AM | cout: [31]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [31]
01/29 04:22:31 AM | cout: [32]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [32]
01/29 04:22:31 AM | cout: [32]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [33]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [33]
01/29 04:22:31 AM | cout: [33]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [33]
01/29 04:22:31 AM | cout: [33]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [33]
01/29 04:22:31 AM | cout: [34]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [34]
01/29 04:22:31 AM | cout: [34]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [35]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [35]
01/29 04:22:31 AM | cout: [35]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [35]
01/29 04:22:31 AM | cout: [35]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [35]
01/29 04:22:31 AM | cout: [36]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [36]
01/29 04:22:31 AM | cout: [36]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [37]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [37]
01/29 04:22:31 AM | cout: [37]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [37]
01/29 04:22:31 AM | cout: [37]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [37]
01/29 04:22:31 AM | cout: [38]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [38]
01/29 04:22:31 AM | cout: [38]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [39]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [39]
01/29 04:22:31 AM | cout: [39]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [39]
01/29 04:22:31 AM | cout: [39]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [39]
01/29 04:22:31 AM | cout: [40]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [40]
01/29 04:22:31 AM | cout: [40]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [41]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [41]
01/29 04:22:31 AM | cout: [41]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [41]
01/29 04:22:31 AM | cout: [41]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [41]
01/29 04:22:31 AM | cout: [42]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [42]
01/29 04:22:31 AM | cout: [42]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [43]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [43]
01/29 04:22:31 AM | cout: [43]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [43]
01/29 04:22:31 AM | cout: [43]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [43]
01/29 04:22:31 AM | cout: [44]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [44]
01/29 04:22:31 AM | cout: [44]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [45]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [45]
01/29 04:22:31 AM | cout: [45]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [45]
01/29 04:22:31 AM | cout: [45]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [45]
01/29 04:22:31 AM | cout: [46]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [46]
01/29 04:22:31 AM | cout: [46]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [47]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [47]
01/29 04:22:31 AM | cout: [47]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [47]
01/29 04:22:31 AM | cout: [47]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [47]
01/29 04:22:31 AM | cout: [48]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [48]
01/29 04:22:31 AM | cout: [48]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [49]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [49]
01/29 04:22:31 AM | cout: [49]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [49]
01/29 04:22:31 AM | cout: [49]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [49]
01/29 04:22:31 AM | cout: [50]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [50]
01/29 04:22:31 AM | cout: [50]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [51]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [51]
01/29 04:22:31 AM | cout: [51]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [51]
01/29 04:22:31 AM | cout: [51]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [51]
01/29 04:22:31 AM | cout: [52]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [52]
01/29 04:22:31 AM | cout: [52]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: [53]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [53]
01/29 04:22:31 AM | cout: [53]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: [53]
01/29 04:22:31 AM | cout: [53]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:22:31 AM | cin: [53]
01/29 04:22:31 AM | cout: [54]
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:22:31 AM | cin: [54]
01/29 04:22:31 AM | cout: [54]
01/29 04:22:31 AM | active
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: ReLU(inplace=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: AdaptiveAvgPool2d(output_size=(1, 1))
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | -----
01/29 04:22:31 AM | module: Linear(in_features=64, out_features=10, bias=True)
01/29 04:22:31 AM | cin: None
01/29 04:22:31 AM | cout: None
01/29 04:22:31 AM | inactive
01/29 04:22:31 AM | Used masks: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
01/29 04:22:31 AM | 55 unique masks in total
01/29 04:22:31 AM | === Batch 1/5
01/29 04:22:32 AM | loss = 0.046 + 4.444 + 0.040 = 4.530
01/29 04:22:33 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.94  0.94  0.94  0.83  0.83  0.83  0.94  0.94  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.94  0.94  0.83  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.94  0.94  0.83  0.94  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.94  0.83  0.94  0.83  0.83  0.83  0.94  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.94  0.83  0.83  0.94  0.83  0.83  0.94  0.94  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83 ]
[ 0.84  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.94  0.83  0.94  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.94  0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.94  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.94  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.94 ]
[ 0.94  0.83  0.83  0.83  0.94  0.83  0.94  0.83  0.83  0.83  0.94  0.83 ]
[ 0.94  0.83  0.94  0.94  0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.94 ]

01/29 04:22:33 AM | === Batch 2/5
01/29 04:22:34 AM | loss = 0.803 + 3.668 + 0.060 = 4.530
01/29 04:22:34 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.73  0.97  0.75  0.75  0.77  0.82  0.73  0.97  0.73  0.74  0.88  0.84 ]
[ 0.92  0.74  0.75  0.97  0.96  0.96  0.88  0.87  0.73  0.97  0.93  0.96 ]
[ 0.78  0.78  0.73  0.74  0.75  0.73  0.77  0.97  0.74  0.73  0.86  0.74 ]
[ 0.75  0.86  0.75  0.96  0.97  0.88  0.88  0.97  0.76  0.74  0.88  0.96 ]
[ 0.87  0.87  0.86  0.85  0.88  0.73  0.73  0.73  0.73  0.75  0.73  0.75 ]
[ 0.87  0.80  0.88  0.97  0.94  0.88  0.88  0.97  0.88  0.88  0.74  0.96 ]
[ 0.74  0.83  0.78  0.86  0.86  0.73  0.75  0.73  0.92  0.87  0.73  0.80 ]
[ 0.75  0.82  0.89  0.97  0.75  0.73  0.88  0.73  0.74  0.87  0.74  0.88 ]
[ 0.74  0.74  0.73  0.73  0.84  0.74  0.74  0.75  0.73  0.74  0.73  0.77 ]
[ 0.75  0.83  0.88  0.75  0.97  0.74  0.87  0.97  0.88  0.88  0.73  0.81 ]
[ 0.74  0.78  0.73  0.73  0.74  0.74  0.87  0.74  0.75  0.73  0.86  0.79 ]
[ 0.75  0.88  0.87  0.97  0.74  0.74  0.88  0.73  0.88  0.87  0.74  0.97 ]
[ 0.76  0.78  0.79  0.78  0.73  0.77  0.73  0.80  0.73  0.73  0.87  0.75 ]
[ 0.75  0.95  0.88  0.79  0.97  0.75  0.88  0.74  0.96  0.73  0.88  0.87 ]
[ 0.93  0.84  0.74  0.97  0.76  0.87  0.87  0.94  0.96  0.73  0.81  0.80 ]
[ 0.76  0.97  0.88  0.73  0.75  0.75  0.88  0.74  0.88  0.84  0.88  0.88 ]
[ 0.75  0.80  0.73  0.85  0.86  0.73  0.84  0.73  0.73  0.73  0.85  0.75 ]
[ 0.75  0.93  0.88  0.79  0.88  0.74  0.83  0.73  0.88  0.84  0.87  0.81 ]
[ 0.97  0.88  0.88  0.97  0.96  0.74  0.96  0.81  0.96  0.89  0.89  0.97 ]
[ 0.73  0.76  0.88  0.92  0.86  0.74  0.88  0.88  0.73  0.97  0.95  0.96 ]
[ 0.73  0.74  0.73  0.82  0.80  0.73  0.87  0.73  0.75  0.86  0.84  0.83 ]
[ 0.74  0.76  0.86  0.93  0.88  0.75  0.76  0.88  0.74  0.73  0.73  0.74 ]
[ 0.74  0.87  0.75  0.75  0.75  0.80  0.79  0.87  0.73  0.91  0.75  0.85 ]
[ 0.74  0.75  0.88  0.74  0.88  0.75  0.76  0.88  0.83  0.83  0.73  0.75 ]
[ 0.87  0.88  0.73  0.74  0.73  0.73  0.83  0.88  0.75  0.82  0.87  0.74 ]
[ 0.73  0.75  0.88  0.74  0.83  0.75  0.76  0.73  0.87  0.87  0.74  0.88 ]
[ 0.83  0.73  0.74  0.74  0.74  0.74  0.85  0.73  0.88  0.81  0.85  0.74 ]
[ 0.75  0.75  0.86  0.94  0.88  0.75  0.74  0.87  0.87  0.74  0.73  0.88 ]
[ 0.74  0.73  0.73  0.78  0.73  0.75  0.87  0.74  0.76  0.73  0.76  0.73 ]
[ 0.75  0.75  0.88  0.92  0.88  0.75  0.73  0.88  0.73  0.74  0.74  0.97 ]
[ 0.73  0.73  0.94  0.85  0.73  0.81  0.74  0.86  0.86  0.97  0.76  0.86 ]
[ 0.74  0.74  0.86  0.75  0.88  0.74  0.86  0.73  0.77  0.74  0.75  0.87 ]
[ 0.73  0.74  0.75  0.87  0.73  0.73  0.74  0.73  0.87  0.76  0.73  0.74 ]
[ 0.75  0.74  0.87  0.75  0.74  0.74  0.74  0.73  0.74  0.74  0.74  0.73 ]
[ 0.97  0.83  0.75  0.73  0.75  0.77  0.93  0.73  0.73  0.86  0.87  0.74 ]
[ 0.74  0.75  0.73  0.73  0.88  0.74  0.74  0.74  0.76  0.88  0.75  0.87 ]
[ 0.97  0.97  0.88  0.96  0.87  0.88  0.88  0.97  0.97  0.75  0.76  0.75 ]
[ 0.76  0.88  0.92  0.94  0.79  0.73  0.92  0.73  0.88  0.97  0.97  0.97 ]
[ 0.80  0.86  0.86  0.87  0.88  0.78  0.77  0.87  0.88  0.93  0.75  0.74 ]
[ 0.77  0.88  0.76  0.75  0.85  0.88  0.92  0.87  0.88  0.74  0.73  0.96 ]
[ 0.78  0.88  0.73  0.74  0.94  0.73  0.73  0.87  0.74  0.78  0.86  0.89 ]
[ 0.76  0.93  0.75  0.75  0.93  0.79  0.97  0.88  0.73  0.73  0.88  0.97 ]
[ 0.83  0.95  0.82  0.85  0.73  0.87  0.77  0.84  0.88  0.85  0.75  0.75 ]
[ 0.76  0.92  0.76  0.91  0.73  0.87  0.92  0.81  0.85  0.73  0.83  0.74 ]
[ 0.75  0.88  0.75  0.81  0.86  0.73  0.74  0.74  0.74  0.75  0.86  0.93 ]
[ 0.75  0.92  0.76  0.92  0.84  0.74  0.88  0.87  0.87  0.76  0.96  0.75 ]
[ 0.88  0.73  0.74  0.75  0.74  0.73  0.77  0.96  0.88  0.87  0.87  0.74 ]
[ 0.79  0.92  0.88  0.84  0.81  0.87  0.73  0.76  0.84  0.94  0.76  0.74 ]
[ 0.73  0.75  0.73  0.92  0.73  0.74  0.83  0.74  0.92  0.74  0.93  0.73 ]
[ 0.87  0.73  0.97  0.85  0.87  0.94  0.88  0.86  0.88  0.74  0.85  0.92 ]
[ 0.75  0.87  0.88  0.74  0.92  0.80  0.87  0.82  0.76  0.88  0.73  0.97 ]
[ 0.88  0.88  0.73  0.86  0.88  0.76  0.76  0.87  0.73  0.95  0.74  0.97 ]
[ 0.97  0.75  0.75  0.88  0.92  0.75  0.92  0.87  0.85  0.77  0.91  0.75 ]
[ 0.91  0.86  0.92  0.92  0.88  0.73  0.91  0.88  0.88  0.94  0.88  0.97 ]

01/29 04:22:34 AM | === Batch 3/5
01/29 04:22:35 AM | loss = 0.586 + 3.152 + 0.072 = 3.811
01/29 04:22:36 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.60  0.96  0.64  0.78  0.67  0.79  0.60  0.98  0.60  0.64  0.91  0.79 ]
[ 0.89  0.67  0.64  0.98  0.98  0.97  0.88  0.91  0.65  0.98  0.94  0.97 ]
[ 0.70  0.81  0.61  0.76  0.76  0.62  0.76  0.98  0.61  0.61  0.85  0.64 ]
[ 0.66  0.84  0.72  0.97  0.98  0.91  0.90  0.98  0.71  0.65  0.91  0.97 ]
[ 0.87  0.87  0.84  0.81  0.91  0.63  0.60  0.63  0.60  0.64  0.60  0.78 ]
[ 0.91  0.74  0.92  0.98  0.95  0.89  0.89  0.96  0.90  0.90  0.63  0.97 ]
[ 0.62  0.79  0.74  0.83  0.90  0.60  0.70  0.72  0.92  0.89  0.62  0.73 ]
[ 0.70  0.76  0.92  0.98  0.71  0.61  0.92  0.70  0.63  0.85  0.62  0.90 ]
[ 0.63  0.62  0.60  0.62  0.84  0.63  0.71  0.63  0.60  0.72  0.61  0.71 ]
[ 0.67  0.77  0.92  0.64  0.98  0.63  0.90  0.97  0.89  0.88  0.61  0.75 ]
[ 0.61  0.69  0.60  0.61  0.70  0.63  0.89  0.74  0.70  0.60  0.90  0.71 ]
[ 0.67  0.89  0.91  0.98  0.75  0.62  0.89  0.61  0.90  0.85  0.67  0.97 ]
[ 0.66  0.75  0.83  0.68  0.79  0.83  0.63  0.84  0.61  0.62  0.91  0.66 ]
[ 0.66  0.96  0.92  0.72  0.96  0.65  0.88  0.66  0.97  0.61  0.91  0.89 ]
[ 0.90  0.86  0.61  0.98  0.67  0.90  0.89  0.93  0.98  0.60  0.75  0.75 ]
[ 0.68  0.98  0.92  0.63  0.79  0.64  0.90  0.62  0.88  0.78  0.90  0.91 ]
[ 0.63  0.75  0.61  0.88  0.87  0.62  0.81  0.65  0.60  0.60  0.83  0.63 ]
[ 0.68  0.93  0.91  0.71  0.92  0.63  0.79  0.60  0.88  0.79  0.87  0.74 ]
[ 0.97  0.87  0.92  0.98  0.97  0.78  0.97  0.74  0.96  0.90  0.92  0.97 ]
[ 0.60  0.76  0.92  0.93  0.88  0.65  0.92  0.91  0.76  0.97  0.96  0.98 ]
[ 0.62  0.62  0.60  0.76  0.76  0.60  0.87  0.60  0.70  0.84  0.80  0.82 ]
[ 0.76  0.77  0.89  0.93  0.91  0.71  0.79  0.91  0.64  0.62  0.60  0.61 ]
[ 0.70  0.86  0.73  0.72  0.76  0.73  0.71  0.86  0.63  0.89  0.72  0.82 ]
[ 0.71  0.77  0.92  0.78  0.89  0.72  0.81  0.91  0.85  0.78  0.71  0.68 ]
[ 0.92  0.88  0.62  0.63  0.67  0.60  0.77  0.89  0.67  0.76  0.88  0.63 ]
[ 0.73  0.77  0.92  0.70  0.82  0.71  0.70  0.67  0.89  0.83  0.64  0.90 ]
[ 0.76  0.62  0.65  0.62  0.65  0.73  0.89  0.60  0.88  0.75  0.82  0.63 ]
[ 0.71  0.78  0.91  0.94  0.89  0.73  0.69  0.89  0.86  0.75  0.61  0.91 ]
[ 0.63  0.63  0.61  0.70  0.66  0.64  0.87  0.61  0.67  0.64  0.66  0.60 ]
[ 0.71  0.75  0.92  0.94  0.91  0.70  0.76  0.92  0.60  0.74  0.68  0.97 ]
[ 0.60  0.60  0.92  0.82  0.60  0.74  0.61  0.84  0.89  0.96  0.67  0.83 ]
[ 0.66  0.77  0.89  0.73  0.91  0.63  0.84  0.67  0.67  0.77  0.72  0.86 ]
[ 0.60  0.62  0.70  0.90  0.76  0.61  0.67  0.60  0.88  0.65  0.60  0.65 ]
[ 0.73  0.74  0.91  0.76  0.67  0.72  0.77  0.75  0.64  0.72  0.61  0.62 ]
[ 0.98  0.84  0.73  0.61  0.64  0.78  0.90  0.60  0.62  0.86  0.88  0.63 ]
[ 0.73  0.75  0.60  0.75  0.92  0.65  0.73  0.62  0.65  0.89  0.64  0.90 ]
[ 0.98  0.97  0.91  0.98  0.87  0.92  0.91  0.96  0.98  0.78  0.77  0.65 ]
[ 0.70  0.91  0.91  0.93  0.84  0.60  0.90  0.60  0.90  0.98  0.97  0.97 ]
[ 0.76  0.90  0.91  0.85  0.89  0.69  0.68  0.89  0.90  0.91  0.63  0.73 ]
[ 0.75  0.91  0.71  0.70  0.87  0.87  0.89  0.84  0.89  0.62  0.77  0.96 ]
[ 0.70  0.90  0.60  0.74  0.93  0.70  0.60  0.86  0.62  0.79  0.87  0.91 ]
[ 0.73  0.92  0.66  0.68  0.89  0.84  0.98  0.91  0.79  0.61  0.90  0.98 ]
[ 0.87  0.94  0.77  0.85  0.60  0.90  0.68  0.86  0.86  0.80  0.68  0.71 ]
[ 0.78  0.89  0.72  0.88  0.60  0.91  0.90  0.75  0.83  0.64  0.77  0.68 ]
[ 0.74  0.90  0.76  0.78  0.90  0.60  0.77  0.61  0.68  0.65  0.88  0.93 ]
[ 0.64  0.89  0.81  0.88  0.85  0.79  0.90  0.89  0.88  0.79  0.97  0.67 ]
[ 0.86  0.60  0.77  0.65  0.66  0.62  0.75  0.96  0.88  0.87  0.90  0.61 ]
[ 0.71  0.90  0.90  0.88  0.74  0.91  0.79  0.66  0.78  0.92  0.65  0.70 ]
[ 0.61  0.64  0.60  0.90  0.79  0.62  0.80  0.61  0.89  0.62  0.90  0.60 ]
[ 0.87  0.79  0.98  0.86  0.89  0.95  0.91  0.84  0.89  0.79  0.80  0.88 ]
[ 0.67  0.91  0.91  0.77  0.89  0.73  0.91  0.79  0.72  0.92  0.77  0.96 ]
[ 0.90  0.90  0.61  0.89  0.92  0.81  0.73  0.90  0.77  0.94  0.74  0.97 ]
[ 0.98  0.64  0.65  0.88  0.89  0.79  0.89  0.90  0.89  0.69  0.87  0.71 ]
[ 0.88  0.84  0.94  0.90  0.92  0.61  0.88  0.89  0.86  0.92  0.87  0.97 ]

01/29 04:22:36 AM | === Batch 4/5
01/29 04:22:36 AM | loss = 0.586 + 2.596 + 0.086 = 3.267
01/29 04:22:37 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.46  0.95  0.51  0.78  0.55  0.83  0.46  0.99  0.46  0.57  0.92  0.70 ]
[ 0.91  0.56  0.63  0.98  0.99  0.97  0.86  0.90  0.68  0.98  0.96  0.98 ]
[ 0.59  0.80  0.46  0.77  0.81  0.48  0.75  0.99  0.57  0.48  0.81  0.52 ]
[ 0.58  0.81  0.64  0.97  0.99  0.91  0.90  0.99  0.71  0.53  0.93  0.97 ]
[ 0.84  0.85  0.82  0.75  0.93  0.54  0.46  0.50  0.46  0.69  0.46  0.82 ]
[ 0.94  0.63  0.93  0.98  0.95  0.89  0.88  0.95  0.91  0.91  0.55  0.97 ]
[ 0.51  0.71  0.66  0.78  0.92  0.45  0.74  0.65  0.90  0.88  0.50  0.63 ]
[ 0.70  0.71  0.94  0.98  0.70  0.49  0.93  0.63  0.50  0.83  0.55  0.91 ]
[ 0.60  0.53  0.46  0.50  0.81  0.50  0.63  0.49  0.45  0.68  0.48  0.69 ]
[ 0.68  0.73  0.94  0.51  0.99  0.53  0.90  0.98  0.89  0.87  0.49  0.65 ]
[ 0.48  0.59  0.46  0.47  0.74  0.64  0.91  0.80  0.67  0.46  0.91  0.60 ]
[ 0.68  0.88  0.92  0.98  0.81  0.55  0.88  0.48  0.91  0.81  0.57  0.96 ]
[ 0.61  0.77  0.89  0.65  0.81  0.84  0.52  0.88  0.46  0.50  0.94  0.55 ]
[ 0.66  0.96  0.94  0.61  0.95  0.64  0.87  0.58  0.97  0.46  0.93  0.89 ]
[ 0.84  0.89  0.47  0.98  0.71  0.89  0.89  0.94  0.98  0.45  0.67  0.66 ]
[ 0.68  0.98  0.94  0.50  0.81  0.53  0.91  0.47  0.86  0.71  0.92  0.92 ]
[ 0.58  0.66  0.48  0.92  0.84  0.49  0.74  0.55  0.46  0.46  0.80  0.52 ]
[ 0.69  0.91  0.92  0.60  0.94  0.60  0.71  0.46  0.86  0.71  0.90  0.66 ]
[ 0.97  0.87  0.94  0.98  0.98  0.83  0.96  0.64  0.95  0.91  0.94  0.97 ]
[ 0.46  0.79  0.95  0.93  0.89  0.56  0.94  0.91  0.82  0.98  0.98  0.98 ]
[ 0.49  0.48  0.45  0.67  0.79  0.46  0.83  0.46  0.66  0.81  0.72  0.78 ]
[ 0.76  0.81  0.91  0.93  0.93  0.73  0.80  0.91  0.59  0.61  0.45  0.47 ]
[ 0.66  0.83  0.70  0.69  0.79  0.63  0.67  0.83  0.51  0.85  0.72  0.75 ]
[ 0.69  0.81  0.93  0.84  0.88  0.73  0.84  0.93  0.89  0.71  0.75  0.59 ]
[ 0.94  0.87  0.50  0.65  0.65  0.46  0.69  0.89  0.61  0.67  0.87  0.50 ]
[ 0.70  0.81  0.94  0.64  0.85  0.71  0.61  0.57  0.87  0.85  0.57  0.90 ]
[ 0.68  0.49  0.55  0.49  0.53  0.74  0.89  0.47  0.85  0.64  0.76  0.50 ]
[ 0.65  0.83  0.91  0.93  0.88  0.74  0.60  0.90  0.82  0.80  0.54  0.93 ]
[ 0.49  0.50  0.47  0.60  0.58  0.52  0.87  0.48  0.54  0.52  0.53  0.46 ]
[ 0.69  0.80  0.93  0.94  0.93  0.68  0.76  0.93  0.46  0.80  0.65  0.98 ]
[ 0.46  0.45  0.89  0.75  0.46  0.64  0.47  0.81  0.89  0.96  0.55  0.76 ]
[ 0.58  0.80  0.91  0.73  0.94  0.50  0.81  0.65  0.55  0.82  0.71  0.83 ]
[ 0.46  0.48  0.61  0.92  0.80  0.46  0.58  0.46  0.88  0.52  0.45  0.55 ]
[ 0.70  0.77  0.93  0.71  0.59  0.75  0.80  0.72  0.66  0.76  0.47  0.49 ]
[ 0.99  0.85  0.72  0.48  0.51  0.83  0.88  0.49  0.49  0.84  0.87  0.51 ]
[ 0.69  0.76  0.46  0.72  0.94  0.58  0.67  0.62  0.54  0.87  0.51  0.93 ]
[ 0.98  0.96  0.93  0.98  0.84  0.95  0.92  0.95  0.98  0.78  0.82  0.54 ]
[ 0.73  0.92  0.90  0.95  0.87  0.46  0.88  0.46  0.88  0.98  0.98  0.98 ]
[ 0.68  0.90  0.92  0.82  0.89  0.58  0.73  0.89  0.90  0.88  0.65  0.71 ]
[ 0.80  0.92  0.72  0.74  0.87  0.88  0.87  0.79  0.87  0.49  0.83  0.97 ]
[ 0.62  0.91  0.46  0.67  0.93  0.61  0.46  0.86  0.54  0.78  0.87  0.92 ]
[ 0.75  0.92  0.61  0.72  0.88  0.89  0.99  0.92  0.85  0.62  0.92  0.99 ]
[ 0.92  0.94  0.78  0.83  0.46  0.92  0.57  0.90  0.81  0.72  0.68  0.68 ]
[ 0.83  0.88  0.70  0.89  0.47  0.94  0.89  0.66  0.79  0.63  0.79  0.59 ]
[ 0.76  0.92  0.76  0.71  0.93  0.46  0.80  0.55  0.62  0.53  0.90  0.93 ]
[ 0.52  0.88  0.78  0.87  0.84  0.82  0.91  0.91  0.89  0.85  0.98  0.57 ]
[ 0.83  0.46  0.74  0.63  0.71  0.60  0.78  0.95  0.88  0.85  0.92  0.60 ]
[ 0.60  0.92  0.90  0.88  0.73  0.94  0.84  0.54  0.70  0.89  0.64  0.63 ]
[ 0.50  0.52  0.47  0.88  0.84  0.63  0.83  0.47  0.84  0.52  0.85  0.46 ]
[ 0.84  0.75  0.98  0.89  0.91  0.94  0.92  0.82  0.89  0.80  0.79  0.86 ]
[ 0.65  0.92  0.91  0.81  0.85  0.75  0.94  0.80  0.77  0.95  0.75  0.96 ]
[ 0.89  0.91  0.48  0.89  0.95  0.84  0.75  0.91  0.82  0.92  0.76  0.98 ]
[ 0.98  0.51  0.56  0.87  0.83  0.85  0.89  0.93  0.90  0.60  0.81  0.63 ]
[ 0.87  0.79  0.92  0.88  0.94  0.46  0.86  0.90  0.81  0.90  0.86  0.97 ]

01/29 04:22:37 AM | === Batch 5/5
01/29 04:22:38 AM | loss = 1.443 + 2.014 + 0.096 = 3.553
01/29 04:22:39 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.32  0.93  0.37  0.77  0.42  0.88  0.32  0.99  0.32  0.52  0.90  0.59 ]
[ 0.92  0.44  0.60  0.99  0.99  0.96  0.83  0.86  0.75  0.98  0.97  0.98 ]
[ 0.46  0.75  0.32  0.75  0.80  0.34  0.69  0.99  0.62  0.34  0.75  0.41 ]
[ 0.48  0.82  0.53  0.97  0.99  0.90  0.91  0.99  0.75  0.49  0.94  0.97 ]
[ 0.80  0.79  0.78  0.66  0.92  0.59  0.32  0.41  0.32  0.74  0.36  0.83 ]
[ 0.96  0.55  0.93  0.98  0.96  0.88  0.87  0.92  0.91  0.90  0.59  0.98 ]
[ 0.42  0.67  0.55  0.70  0.92  0.31  0.75  0.68  0.89  0.86  0.38  0.58 ]
[ 0.71  0.72  0.94  0.99  0.72  0.37  0.94  0.53  0.48  0.77  0.46  0.92 ]
[ 0.62  0.58  0.32  0.37  0.74  0.36  0.52  0.35  0.31  0.60  0.55  0.75 ]
[ 0.73  0.71  0.94  0.37  0.99  0.49  0.92  0.98  0.88  0.84  0.39  0.54 ]
[ 0.35  0.50  0.32  0.33  0.72  0.69  0.94  0.86  0.67  0.32  0.90  0.47 ]
[ 0.72  0.88  0.93  0.98  0.86  0.58  0.89  0.35  0.90  0.75  0.51  0.96 ]
[ 0.66  0.76  0.92  0.56  0.78  0.81  0.53  0.91  0.32  0.43  0.94  0.45 ]
[ 0.67  0.95  0.95  0.49  0.94  0.69  0.85  0.49  0.97  0.33  0.94  0.87 ]
[ 0.77  0.91  0.36  0.98  0.76  0.88  0.89  0.96  0.98  0.32  0.55  0.55 ]
[ 0.70  0.99  0.95  0.37  0.77  0.40  0.92  0.36  0.83  0.61  0.93  0.93 ]
[ 0.52  0.56  0.35  0.94  0.78  0.35  0.65  0.47  0.32  0.32  0.74  0.39 ]
[ 0.74  0.88  0.92  0.47  0.95  0.63  0.62  0.33  0.83  0.60  0.90  0.57 ]
[ 0.96  0.90  0.95  0.98  0.98  0.88  0.95  0.52  0.93  0.91  0.96  0.97 ]
[ 0.32  0.82  0.96  0.94  0.90  0.44  0.95  0.91  0.87  0.98  0.98  0.99 ]
[ 0.38  0.35  0.31  0.56  0.77  0.35  0.78  0.39  0.69  0.76  0.67  0.71 ]
[ 0.78  0.84  0.92  0.94  0.94  0.79  0.83  0.91  0.60  0.58  0.38  0.33 ]
[ 0.63  0.84  0.67  0.71  0.82  0.51  0.58  0.78  0.41  0.79  0.71  0.66 ]
[ 0.72  0.85  0.94  0.88  0.89  0.77  0.87  0.93  0.92  0.60  0.81  0.50 ]
[ 0.95  0.86  0.43  0.72  0.68  0.31  0.63  0.88  0.64  0.55  0.84  0.45 ]
[ 0.72  0.84  0.95  0.64  0.89  0.71  0.52  0.57  0.87  0.87  0.57  0.88 ]
[ 0.65  0.38  0.52  0.35  0.40  0.76  0.86  0.33  0.81  0.53  0.69  0.37 ]
[ 0.62  0.87  0.90  0.94  0.89  0.77  0.52  0.90  0.75  0.85  0.55  0.95 ]
[ 0.41  0.39  0.34  0.58  0.58  0.40  0.85  0.37  0.48  0.40  0.39  0.32 ]
[ 0.66  0.83  0.94  0.95  0.95  0.70  0.76  0.94  0.33  0.84  0.70  0.99 ]
[ 0.32  0.31  0.88  0.75  0.32  0.53  0.33  0.77  0.88  0.94  0.42  0.74 ]
[ 0.48  0.84  0.92  0.73  0.95  0.44  0.77  0.63  0.43  0.87  0.75  0.85 ]
[ 0.32  0.43  0.54  0.94  0.85  0.33  0.49  0.32  0.90  0.42  0.31  0.52 ]
[ 0.68  0.80  0.94  0.72  0.62  0.79  0.84  0.75  0.72  0.82  0.50  0.47 ]
[ 0.99  0.84  0.74  0.34  0.38  0.86  0.85  0.54  0.36  0.87  0.83  0.40 ]
[ 0.68  0.78  0.32  0.73  0.96  0.51  0.63  0.67  0.50  0.85  0.57  0.95 ]
[ 0.99  0.96  0.95  0.98  0.83  0.96  0.92  0.94  0.98  0.82  0.86  0.58 ]
[ 0.77  0.92  0.91  0.95  0.89  0.32  0.89  0.32  0.88  0.98  0.98  0.98 ]
[ 0.67  0.89  0.93  0.84  0.87  0.45  0.80  0.91  0.88  0.85  0.71  0.70 ]
[ 0.85  0.93  0.76  0.74  0.86  0.88  0.89  0.79  0.88  0.39  0.85  0.97 ]
[ 0.52  0.91  0.32  0.64  0.93  0.62  0.32  0.84  0.45  0.79  0.84  0.93 ]
[ 0.77  0.91  0.60  0.75  0.87  0.90  0.99  0.94  0.85  0.63  0.93  0.99 ]
[ 0.94  0.95  0.78  0.81  0.35  0.91  0.47  0.90  0.78  0.63  0.67  0.63 ]
[ 0.87  0.90  0.67  0.90  0.46  0.95  0.90  0.58  0.72  0.62  0.83  0.65 ]
[ 0.76  0.93  0.73  0.65  0.94  0.32  0.82  0.56  0.63  0.41  0.91  0.94 ]
[ 0.41  0.90  0.79  0.83  0.86  0.86  0.91  0.93  0.91  0.81  0.98  0.63 ]
[ 0.80  0.31  0.73  0.66  0.68  0.62  0.78  0.95  0.86  0.82  0.93  0.67 ]
[ 0.53  0.94  0.90  0.88  0.76  0.96  0.89  0.41  0.62  0.84  0.66  0.69 ]
[ 0.39  0.41  0.35  0.88  0.85  0.55  0.86  0.33  0.79  0.47  0.77  0.32 ]
[ 0.77  0.67  0.98  0.90  0.93  0.95  0.93  0.76  0.86  0.78  0.82  0.81 ]
[ 0.57  0.94  0.92  0.79  0.87  0.74  0.94  0.79  0.82  0.97  0.68  0.95 ]
[ 0.88  0.90  0.37  0.88  0.96  0.85  0.79  0.91  0.81  0.88  0.81  0.97 ]
[ 0.98  0.53  0.48  0.83  0.76  0.82  0.89  0.93  0.89  0.50  0.80  0.54 ]
[ 0.87  0.71  0.92  0.85  0.95  0.34  0.85  0.91  0.79  0.85  0.83  0.96 ]

01/29 04:22:39 AM | ===
Best loss was 3.55 at iteration 5

01/29 04:22:39 AM | Looking for optimal threshold...
01/29 04:22:39 AM | Testing threshold 0.5
01/29 04:22:39 AM | Distance to target: 40,279,168
01/29 04:22:39 AM | Testing threshold 0.75
01/29 04:22:39 AM | Distance to target: 8,288,704
01/29 04:22:39 AM | Testing threshold 0.625
01/29 04:22:39 AM | Distance to target: 13,633,024
01/29 04:22:39 AM | Testing threshold 0.6875
01/29 04:22:39 AM | Distance to target: 1,127,552
01/29 04:22:39 AM | Testing threshold 0.71875
01/29 04:22:39 AM | Distance to target: 3,194,944
01/29 04:22:39 AM | Testing threshold 0.703125
01/29 04:22:40 AM | Distance to target: 1,171,840
01/29 04:22:40 AM | Testing threshold 0.6953125
01/29 04:22:40 AM | Distance to target: 275,840
01/29 04:22:40 AM | Testing threshold 0.69140625
01/29 04:22:40 AM | Distance to target: 554,112
01/29 04:22:40 AM | Testing threshold 0.693359375
01/29 04:22:40 AM | Distance to target: 258,176
01/29 04:22:40 AM | Testing threshold 0.6943359375
01/29 04:22:40 AM | Distance to target: 129,472
01/29 04:22:40 AM | Testing threshold 0.69384765625
01/29 04:22:40 AM | Distance to target: 129,472
01/29 04:22:40 AM | Testing threshold 0.693603515625
01/29 04:22:40 AM | Distance to target: 192,960
01/29 04:22:40 AM | Testing threshold 0.6937255859375
01/29 04:22:40 AM | Distance to target: 129,472
01/29 04:22:40 AM | Testing threshold 0.69366455078125
01/29 04:22:40 AM | Distance to target: 67,136
01/29 04:22:40 AM | Testing threshold 0.693634033203125
01/29 04:22:40 AM | Distance to target: 192,960
01/29 04:22:40 AM | Testing threshold 0.6936492919921875
01/29 04:22:40 AM | Distance to target: 67,136
01/29 04:22:40 AM | Testing threshold 0.6936416625976562
01/29 04:22:40 AM | Distance to target: 192,960
01/29 04:22:40 AM | Testing threshold 0.6936454772949219
01/29 04:22:41 AM | Distance to target: 67,136
01/29 04:22:41 AM | Testing threshold 0.6936435699462891
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936445236206055
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936450004577637
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936452388763428
01/29 04:22:41 AM | Distance to target: 67,136
01/29 04:22:41 AM | Testing threshold 0.6936451196670532
01/29 04:22:41 AM | Distance to target: 67,136
01/29 04:22:41 AM | Testing threshold 0.6936450600624084
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936450898647308
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.693645104765892
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936451122164726
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936451159417629
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936451178044081
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936451187357306
01/29 04:22:41 AM | Distance to target: 192,960
01/29 04:22:41 AM | Testing threshold 0.6936451192013919
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451194342226
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451195506379
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196088456
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196379494
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196525013
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196597773
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196634152
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196652342
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196661437
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196665985
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196668258
01/29 04:22:42 AM | Distance to target: 192,960
01/29 04:22:42 AM | Testing threshold 0.6936451196669395
01/29 04:22:43 AM | Distance to target: 192,960
01/29 04:22:43 AM | Testing threshold 0.6936451196669964
01/29 04:22:43 AM | Distance to target: 192,960
01/29 04:22:43 AM | Testing threshold 0.6936451196670248
01/29 04:22:43 AM | Distance to target: 192,960
01/29 04:22:43 AM | Testing threshold 0.693645119667039
01/29 04:22:43 AM | Distance to target: 192,960
01/29 04:22:43 AM | Testing threshold 0.6936451196670461
01/29 04:22:43 AM | Distance to target: 192,960
01/29 04:22:43 AM | Testing threshold 0.6936451196670497
01/29 04:22:43 AM | Distance to target: 192,960
01/29 04:22:43 AM | Testing threshold 0.6936451196670514
01/29 04:22:43 AM | Distance to target: 192,960
01/29 04:22:43 AM | Testing threshold 0.6936451196670523
01/29 04:22:43 AM | Distance to target: 192,960
01/29 04:22:45 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00  0.00  1.00  1.00 ]
[ 1.00  0.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00 ]
[ 0.00  1.00  0.00  1.00  1.00  0.00  1.00  1.00  0.00  0.00  1.00  0.00 ]
[ 0.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00 ]
[ 1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00 ]
[ 0.00  1.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  0.00  1.00 ]
[ 0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 ]
[ 0.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00  0.00  0.00 ]
[ 0.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00  0.00  0.00  1.00  0.00 ]
[ 0.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  0.00  1.00 ]
[ 0.00  1.00  1.00  0.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  0.00 ]
[ 0.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  0.00 ]
[ 0.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  1.00  1.00  0.00  1.00  0.00  0.00  0.00  1.00  0.00 ]
[ 0.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  0.00  1.00  0.00  1.00  0.00  0.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  0.00  0.00 ]
[ 0.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  0.00  1.00  1.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00 ]
[ 1.00  1.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  0.00  1.00  1.00  0.00  0.00  1.00  1.00  0.00  1.00 ]
[ 0.00  0.00  0.00  0.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00 ]
[ 0.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  0.00  1.00 ]
[ 0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00 ]
[ 0.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00 ]
[ 0.00  0.00  1.00  1.00  0.00  0.00  0.00  1.00  1.00  1.00  0.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  1.00  1.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00 ]
[ 1.00  1.00  1.00  0.00  0.00  1.00  1.00  0.00  0.00  1.00  1.00  0.00 ]
[ 0.00  1.00  0.00  1.00  1.00  0.00  0.00  0.00  0.00  1.00  0.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  0.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00 ]
[ 0.00  1.00  0.00  0.00  1.00  0.00  0.00  1.00  0.00  1.00  1.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00  0.00  1.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00 ]
[ 1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00 ]
[ 0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  0.00  0.00 ]
[ 0.00  0.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  0.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00 ]

01/29 04:22:46 AM | ResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(8, 13, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(13, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (1): BasicBlock(
      (conv1): Conv2d(16, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(16, 7, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(7, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(7, 13, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(13, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(16, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(6, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(16, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(2, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(16, 5, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(5, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(8, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(10, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(16, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(16, 5, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(5, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 30, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(30, 30, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(32, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(10, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(10, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(32, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(12, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(32, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(14, 23, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(23, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(32, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(14, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(32, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 23, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(23, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(32, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(12, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(32, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 21, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(21, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(32, 55, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(55, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(55, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 45, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(45, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(45, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(64, 41, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(41, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(41, 49, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(49, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(64, 33, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(33, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(33, 47, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(47, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(64, 44, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(44, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(44, 54, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(54, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(64, 38, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(38, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(38, 44, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(44, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(64, 42, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(42, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(42, 45, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(45, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(64, 44, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(44, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(44, 53, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(53, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(64, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(50, 45, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(45, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (linear): Linear(in_features=64, out_features=10, bias=True)
)
01/29 04:22:50 AM | ----------------------------------------
01/29 04:22:50 AM | Performances input model:
01/29 04:22:50 AM |  - flops: 126,554,816
01/29 04:22:50 AM |  - params: 853,018
01/29 04:22:50 AM |  - accuracy: 93.2699966430664
01/29 04:22:50 AM | ----------------------------------------
01/29 04:22:50 AM | Performances pseudo-pruned model:
01/29 04:22:50 AM |  - flops: 126,554,816
01/29 04:22:50 AM |  - params: 853,018
01/29 04:22:50 AM |  - accuracy: 23.079999923706055
01/29 04:22:50 AM | ----------------------------------------
01/29 04:22:50 AM | Performances pruned model:
01/29 04:22:50 AM |  - flops: 56,032,960
01/29 04:22:50 AM |  - params: 462,609
01/29 04:22:50 AM |  - accuracy: 23.079999923706055
01/29 04:22:50 AM | ----------------------------------------
01/29 04:22:50 AM | Total time: 27.07s
