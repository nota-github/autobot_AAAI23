01/29 04:22:57 AM | args = Namespace(output_dir='result/rebuttal/nb_epoch/resnet56/nbbtchs5/seed_02', loaded_model_path='./checkpoints/cifar10/resnet_56.pt', resume=False, test_only=False, mode='prune', batch_size=64, nb_batches=5, Mflops_target=None, lr=0.6, momentum=0.9, beta=6, gamma=0.4, gpu='0', num_workers=4, dataset='cifar10', arch='resnet_56', save_plot=False, seed=2, lr_finetuning=0.02, epoch_finetuning=200, wd=0.002, data_dir='./data/cifar10/', print_freq=200, num_classes=10, device_ids=[0], device=device(type='cuda', index=0), name_base='')
01/29 04:23:03 AM | ----------------------------------------
01/29 04:23:03 AM | ==> Building model...
01/29 04:23:03 AM | ----------------------------------------
01/29 04:23:03 AM | ==> Loading weights into the model...
01/29 04:23:03 AM | ----------------------------------------
01/29 04:23:03 AM | ResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (1): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (linear): Linear(in_features=64, out_features=10, bias=True)
)
01/29 04:23:05 AM | Save modules info...
01/29 04:23:05 AM | FLOPS pruning ratio is 0.56
01/29 04:23:05 AM | Pruning with information flow
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [1]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [1]
01/29 04:23:05 AM | cout: [1]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [1]
01/29 04:23:05 AM | cout: [1]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [1]
01/29 04:23:05 AM | cout: [2]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [2]
01/29 04:23:05 AM | cout: [2]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [3]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [3]
01/29 04:23:05 AM | cout: [3]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [3]
01/29 04:23:05 AM | cout: [3]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [3]
01/29 04:23:05 AM | cout: [4]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [4]
01/29 04:23:05 AM | cout: [4]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [5]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [5]
01/29 04:23:05 AM | cout: [5]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [5]
01/29 04:23:05 AM | cout: [5]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [5]
01/29 04:23:05 AM | cout: [6]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [6]
01/29 04:23:05 AM | cout: [6]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [7]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [7]
01/29 04:23:05 AM | cout: [7]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [7]
01/29 04:23:05 AM | cout: [7]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [7]
01/29 04:23:05 AM | cout: [8]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [8]
01/29 04:23:05 AM | cout: [8]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [9]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [9]
01/29 04:23:05 AM | cout: [9]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [9]
01/29 04:23:05 AM | cout: [9]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [9]
01/29 04:23:05 AM | cout: [10]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [10]
01/29 04:23:05 AM | cout: [10]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [11]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [11]
01/29 04:23:05 AM | cout: [11]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [11]
01/29 04:23:05 AM | cout: [11]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [11]
01/29 04:23:05 AM | cout: [12]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [12]
01/29 04:23:05 AM | cout: [12]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [13]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [13]
01/29 04:23:05 AM | cout: [13]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [13]
01/29 04:23:05 AM | cout: [13]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [13]
01/29 04:23:05 AM | cout: [14]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [14]
01/29 04:23:05 AM | cout: [14]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [15]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [15]
01/29 04:23:05 AM | cout: [15]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [15]
01/29 04:23:05 AM | cout: [15]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [15]
01/29 04:23:05 AM | cout: [16]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [16]
01/29 04:23:05 AM | cout: [16]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [17]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [17]
01/29 04:23:05 AM | cout: [17]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [17]
01/29 04:23:05 AM | cout: [17]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [17]
01/29 04:23:05 AM | cout: [18]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [18]
01/29 04:23:05 AM | cout: [18]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [19]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [19]
01/29 04:23:05 AM | cout: [19]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [19]
01/29 04:23:05 AM | cout: [19]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [19]
01/29 04:23:05 AM | cout: [20]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [20]
01/29 04:23:05 AM | cout: [20]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [21]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [21]
01/29 04:23:05 AM | cout: [21]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [21]
01/29 04:23:05 AM | cout: [21]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [21]
01/29 04:23:05 AM | cout: [22]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [22]
01/29 04:23:05 AM | cout: [22]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [23]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [23]
01/29 04:23:05 AM | cout: [23]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [23]
01/29 04:23:05 AM | cout: [23]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [23]
01/29 04:23:05 AM | cout: [24]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [24]
01/29 04:23:05 AM | cout: [24]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [25]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [25]
01/29 04:23:05 AM | cout: [25]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [25]
01/29 04:23:05 AM | cout: [25]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [25]
01/29 04:23:05 AM | cout: [26]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [26]
01/29 04:23:05 AM | cout: [26]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [27]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [27]
01/29 04:23:05 AM | cout: [27]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [27]
01/29 04:23:05 AM | cout: [27]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [27]
01/29 04:23:05 AM | cout: [28]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [28]
01/29 04:23:05 AM | cout: [28]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [29]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [29]
01/29 04:23:05 AM | cout: [29]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [29]
01/29 04:23:05 AM | cout: [29]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [29]
01/29 04:23:05 AM | cout: [30]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [30]
01/29 04:23:05 AM | cout: [30]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [31]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [31]
01/29 04:23:05 AM | cout: [31]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [31]
01/29 04:23:05 AM | cout: [31]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [31]
01/29 04:23:05 AM | cout: [32]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [32]
01/29 04:23:05 AM | cout: [32]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [33]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [33]
01/29 04:23:05 AM | cout: [33]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [33]
01/29 04:23:05 AM | cout: [33]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [33]
01/29 04:23:05 AM | cout: [34]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [34]
01/29 04:23:05 AM | cout: [34]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [35]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [35]
01/29 04:23:05 AM | cout: [35]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [35]
01/29 04:23:05 AM | cout: [35]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [35]
01/29 04:23:05 AM | cout: [36]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [36]
01/29 04:23:05 AM | cout: [36]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [37]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [37]
01/29 04:23:05 AM | cout: [37]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [37]
01/29 04:23:05 AM | cout: [37]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [37]
01/29 04:23:05 AM | cout: [38]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [38]
01/29 04:23:05 AM | cout: [38]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [39]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [39]
01/29 04:23:05 AM | cout: [39]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [39]
01/29 04:23:05 AM | cout: [39]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [39]
01/29 04:23:05 AM | cout: [40]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [40]
01/29 04:23:05 AM | cout: [40]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [41]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [41]
01/29 04:23:05 AM | cout: [41]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [41]
01/29 04:23:05 AM | cout: [41]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [41]
01/29 04:23:05 AM | cout: [42]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [42]
01/29 04:23:05 AM | cout: [42]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [43]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [43]
01/29 04:23:05 AM | cout: [43]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [43]
01/29 04:23:05 AM | cout: [43]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [43]
01/29 04:23:05 AM | cout: [44]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [44]
01/29 04:23:05 AM | cout: [44]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [45]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [45]
01/29 04:23:05 AM | cout: [45]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [45]
01/29 04:23:05 AM | cout: [45]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [45]
01/29 04:23:05 AM | cout: [46]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [46]
01/29 04:23:05 AM | cout: [46]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [47]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [47]
01/29 04:23:05 AM | cout: [47]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [47]
01/29 04:23:05 AM | cout: [47]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [47]
01/29 04:23:05 AM | cout: [48]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [48]
01/29 04:23:05 AM | cout: [48]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [49]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [49]
01/29 04:23:05 AM | cout: [49]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [49]
01/29 04:23:05 AM | cout: [49]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [49]
01/29 04:23:05 AM | cout: [50]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [50]
01/29 04:23:05 AM | cout: [50]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [51]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [51]
01/29 04:23:05 AM | cout: [51]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [51]
01/29 04:23:05 AM | cout: [51]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [51]
01/29 04:23:05 AM | cout: [52]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [52]
01/29 04:23:05 AM | cout: [52]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: [53]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [53]
01/29 04:23:05 AM | cout: [53]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: [53]
01/29 04:23:05 AM | cout: [53]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 04:23:05 AM | cin: [53]
01/29 04:23:05 AM | cout: [54]
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 04:23:05 AM | cin: [54]
01/29 04:23:05 AM | cout: [54]
01/29 04:23:05 AM | active
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: ReLU(inplace=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: AdaptiveAvgPool2d(output_size=(1, 1))
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | -----
01/29 04:23:05 AM | module: Linear(in_features=64, out_features=10, bias=True)
01/29 04:23:05 AM | cin: None
01/29 04:23:05 AM | cout: None
01/29 04:23:05 AM | inactive
01/29 04:23:05 AM | Used masks: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
01/29 04:23:05 AM | 55 unique masks in total
01/29 04:23:06 AM | === Batch 1/5
01/29 04:23:07 AM | loss = 0.068 + 4.444 + 0.040 = 4.552
01/29 04:23:08 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.94  0.83  0.94  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.83  0.94  0.94  0.94  0.94  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.94  0.94  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.94  0.94  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.94  0.94  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.94  0.94  0.83  0.83  0.83  0.94  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.94  0.94  0.83  0.94  0.83  0.94  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.84  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.94  0.94  0.83  0.83  0.94  0.83  0.83  0.94  0.94  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.94  0.83  0.83  0.94  0.94  0.94  0.94  0.83  0.94 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.94  0.94 ]
[ 0.83  0.94  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.94  0.94  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.94  0.94  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.94 ]

01/29 04:23:08 AM | === Batch 2/5
01/29 04:23:08 AM | loss = 0.452 + 3.710 + 0.059 = 4.221
01/29 04:23:09 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.73  0.73  0.83  0.75  0.74  0.73  0.73  0.94  0.73  0.73  0.92  0.73 ]
[ 0.87  0.74  0.74  0.88  0.82  0.92  0.87  0.96  0.74  0.97  0.75  0.96 ]
[ 0.73  0.85  0.73  0.73  0.88  0.92  0.80  0.97  0.73  0.74  0.73  0.80 ]
[ 0.93  0.74  0.75  0.86  0.96  0.97  0.97  0.96  0.80  0.85  0.74  0.94 ]
[ 0.73  0.73  0.73  0.73  0.74  0.74  0.73  0.73  0.73  0.73  0.73  0.76 ]
[ 0.80  0.74  0.94  0.88  0.88  0.86  0.97  0.92  0.97  0.88  0.73  0.96 ]
[ 0.73  0.73  0.74  0.74  0.76  0.73  0.73  0.73  0.75  0.74  0.74  0.85 ]
[ 0.85  0.82  0.96  0.88  0.81  0.73  0.95  0.95  0.87  0.77  0.73  0.96 ]
[ 0.83  0.73  0.73  0.76  0.74  0.74  0.74  0.73  0.73  0.74  0.86  0.91 ]
[ 0.86  0.83  0.92  0.83  0.88  0.73  0.85  0.96  0.85  0.87  0.75  0.74 ]
[ 0.73  0.74  0.73  0.74  0.73  0.74  0.87  0.87  0.84  0.73  0.92  0.74 ]
[ 0.86  0.92  0.76  0.87  0.86  0.73  0.87  0.74  0.88  0.75  0.74  0.87 ]
[ 0.87  0.78  0.87  0.85  0.92  0.92  0.84  0.85  0.74  0.84  0.73  0.78 ]
[ 0.84  0.93  0.93  0.78  0.88  0.74  0.94  0.74  0.96  0.73  0.88  0.96 ]
[ 0.75  0.84  0.73  0.94  0.87  0.75  0.73  0.87  0.92  0.73  0.75  0.74 ]
[ 0.86  0.95  0.93  0.82  0.92  0.74  0.94  0.73  0.88  0.73  0.88  0.96 ]
[ 0.86  0.73  0.74  0.87  0.74  0.74  0.74  0.85  0.73  0.73  0.75  0.75 ]
[ 0.86  0.76  0.76  0.82  0.96  0.74  0.74  0.73  0.76  0.77  0.87  0.94 ]
[ 0.88  0.86  0.93  0.96  0.87  0.74  0.96  0.82  0.77  0.95  0.93  0.88 ]
[ 0.73  0.86  0.94  0.77  0.87  0.85  0.87  0.87  0.87  0.88  0.88  0.88 ]
[ 0.74  0.74  0.73  0.73  0.75  0.74  0.75  0.75  0.75  0.73  0.73  0.76 ]
[ 0.92  0.82  0.76  0.74  0.88  0.82  0.83  0.92  0.85  0.73  0.73  0.73 ]
[ 0.78  0.84  0.74  0.73  0.85  0.73  0.85  0.73  0.84  0.75  0.73  0.75 ]
[ 0.91  0.87  0.92  0.74  0.88  0.86  0.87  0.93  0.86  0.84  0.74  0.75 ]
[ 0.93  0.87  0.85  0.75  0.74  0.73  0.74  0.87  0.73  0.73  0.76  0.73 ]
[ 0.92  0.86  0.93  0.75  0.74  0.79  0.85  0.73  0.95  0.85  0.73  0.74 ]
[ 0.87  0.74  0.73  0.82  0.73  0.75  0.75  0.73  0.73  0.74  0.76  0.73 ]
[ 0.76  0.86  0.93  0.73  0.86  0.87  0.87  0.73  0.74  0.82  0.73  0.73 ]
[ 0.81  0.81  0.73  0.77  0.73  0.73  0.78  0.73  0.73  0.73  0.73  0.73 ]
[ 0.76  0.79  0.94  0.73  0.86  0.82  0.85  0.76  0.79  0.75  0.73  0.75 ]
[ 0.74  0.73  0.87  0.85  0.74  0.74  0.74  0.73  0.95  0.85  0.75  0.84 ]
[ 0.75  0.74  0.92  0.73  0.84  0.73  0.75  0.73  0.74  0.75  0.76  0.75 ]
[ 0.73  0.75  0.75  0.75  0.82  0.73  0.76  0.74  0.73  0.74  0.73  0.74 ]
[ 0.76  0.79  0.92  0.74  0.79  0.74  0.73  0.73  0.82  0.91  0.91  0.74 ]
[ 0.73  0.73  0.75  0.74  0.74  0.73  0.77  0.73  0.75  0.75  0.74  0.73 ]
[ 0.91  0.79  0.73  0.76  0.88  0.73  0.86  0.82  0.73  0.86  0.76  0.75 ]
[ 0.89  0.88  0.92  0.92  0.83  0.87  0.96  0.96  0.97  0.95  0.85  0.92 ]
[ 0.84  0.92  0.86  0.88  0.88  0.73  0.88  0.73  0.92  0.96  0.97  0.94 ]
[ 0.74  0.92  0.88  0.74  0.76  0.93  0.74  0.77  0.92  0.73  0.77  0.92 ]
[ 0.88  0.76  0.87  0.89  0.88  0.92  0.73  0.88  0.86  0.75  0.87  0.96 ]
[ 0.73  0.88  0.73  0.96  0.83  0.73  0.73  0.74  0.92  0.73  0.88  0.73 ]
[ 0.83  0.88  0.74  0.88  0.76  0.92  0.75  0.88  0.74  0.95  0.96  0.97 ]
[ 0.74  0.76  0.74  0.74  0.74  0.74  0.75  0.76  0.74  0.87  0.84  0.76 ]
[ 0.86  0.81  0.73  0.88  0.73  0.92  0.73  0.88  0.75  0.78  0.88  0.73 ]
[ 0.76  0.87  0.75  0.73  0.82  0.73  0.73  0.78  0.76  0.74  0.74  0.93 ]
[ 0.84  0.88  0.74  0.74  0.81  0.80  0.80  0.97  0.86  0.87  0.96  0.76 ]
[ 0.82  0.73  0.76  0.85  0.75  0.87  0.77  0.75  0.97  0.96  0.78  0.85 ]
[ 0.75  0.87  0.93  0.76  0.88  0.93  0.79  0.75  0.86  0.88  0.81  0.73 ]
[ 0.86  0.74  0.73  0.81  0.79  0.73  0.81  0.73  0.96  0.83  0.73  0.73 ]
[ 0.74  0.76  0.97  0.74  0.85  0.97  0.96  0.75  0.74  0.73  0.88  0.97 ]
[ 0.80  0.73  0.94  0.74  0.85  0.78  0.77  0.76  0.96  0.97  0.75  0.88 ]
[ 0.74  0.93  0.74  0.75  0.88  0.95  0.83  0.74  0.75  0.74  0.87  0.97 ]
[ 0.93  0.74  0.84  0.75  0.88  0.76  0.88  0.88  0.75  0.74  0.94  0.74 ]
[ 0.85  0.75  0.87  0.92  0.88  0.75  0.82  0.88  0.74  0.97  0.88  0.97 ]

01/29 04:23:09 AM | === Batch 3/5
01/29 04:23:10 AM | loss = 0.203 + 3.061 + 0.074 = 3.338
01/29 04:23:11 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.60  0.61  0.78  0.67  0.61  0.62  0.60  0.94  0.60  0.60  0.91  0.61 ]
[ 0.90  0.61  0.64  0.92  0.78  0.87  0.87  0.97  0.62  0.97  0.69  0.97 ]
[ 0.60  0.82  0.60  0.60  0.90  0.89  0.73  0.98  0.60  0.62  0.60  0.72 ]
[ 0.94  0.63  0.68  0.89  0.98  0.97  0.98  0.98  0.76  0.84  0.61  0.93 ]
[ 0.61  0.62  0.61  0.61  0.63  0.61  0.60  0.60  0.60  0.67  0.60  0.67 ]
[ 0.74  0.65  0.95  0.92  0.91  0.86  0.97  0.88  0.97  0.89  0.67  0.97 ]
[ 0.60  0.61  0.61  0.61  0.66  0.60  0.60  0.61  0.65  0.61  0.62  0.86 ]
[ 0.85  0.81  0.97  0.92  0.77  0.60  0.95  0.94  0.88  0.67  0.62  0.97 ]
[ 0.79  0.60  0.60  0.66  0.62  0.62  0.63  0.61  0.60  0.63  0.88  0.86 ]
[ 0.88  0.79  0.89  0.86  0.91  0.60  0.83  0.98  0.82  0.90  0.64  0.62 ]
[ 0.60  0.63  0.60  0.61  0.60  0.64  0.90  0.90  0.81  0.60  0.87  0.62 ]
[ 0.86  0.88  0.68  0.91  0.89  0.61  0.91  0.61  0.91  0.65  0.62  0.89 ]
[ 0.88  0.69  0.90  0.85  0.88  0.89  0.81  0.88  0.61  0.82  0.61  0.69 ]
[ 0.83  0.93  0.90  0.70  0.90  0.64  0.91  0.61  0.97  0.61  0.91  0.96 ]
[ 0.64  0.82  0.60  0.94  0.88  0.67  0.62  0.87  0.89  0.60  0.65  0.61 ]
[ 0.87  0.96  0.92  0.80  0.90  0.61  0.93  0.61  0.88  0.61  0.91  0.96 ]
[ 0.84  0.61  0.62  0.89  0.62  0.61  0.62  0.83  0.60  0.60  0.65  0.64 ]
[ 0.87  0.71  0.66  0.77  0.97  0.61  0.64  0.60  0.67  0.68  0.90  0.93 ]
[ 0.90  0.87  0.90  0.98  0.91  0.63  0.98  0.80  0.79  0.95  0.91  0.91 ]
[ 0.60  0.88  0.94  0.79  0.88  0.81  0.88  0.82  0.88  0.91  0.90  0.92 ]
[ 0.61  0.61  0.60  0.61  0.65  0.61  0.63  0.63  0.67  0.60  0.64  0.67 ]
[ 0.90  0.77  0.67  0.77  0.90  0.75  0.84  0.88  0.86  0.60  0.60  0.61 ]
[ 0.68  0.84  0.62  0.73  0.80  0.60  0.85  0.60  0.83  0.71  0.61  0.64 ]
[ 0.89  0.90  0.88  0.77  0.90  0.83  0.89  0.90  0.88  0.88  0.64  0.64 ]
[ 0.90  0.86  0.86  0.64  0.66  0.60  0.63  0.87  0.63  0.61  0.68  0.60 ]
[ 0.90  0.86  0.90  0.65  0.62  0.70  0.83  0.61  0.94  0.87  0.60  0.61 ]
[ 0.87  0.61  0.60  0.76  0.61  0.64  0.63  0.60  0.61  0.61  0.66  0.60 ]
[ 0.69  0.86  0.91  0.79  0.89  0.84  0.86  0.60  0.62  0.78  0.63  0.62 ]
[ 0.74  0.74  0.60  0.68  0.60  0.60  0.70  0.60  0.61  0.61  0.60  0.60 ]
[ 0.70  0.71  0.92  0.61  0.88  0.76  0.85  0.66  0.72  0.64  0.60  0.64 ]
[ 0.61  0.60  0.90  0.83  0.61  0.64  0.63  0.60  0.94  0.84  0.64  0.83 ]
[ 0.66  0.61  0.88  0.64  0.81  0.61  0.63  0.60  0.64  0.64  0.65  0.64 ]
[ 0.60  0.64  0.69  0.66  0.76  0.60  0.65  0.63  0.60  0.62  0.60  0.61 ]
[ 0.70  0.71  0.88  0.74  0.71  0.62  0.64  0.61  0.78  0.88  0.87  0.64 ]
[ 0.60  0.61  0.63  0.62  0.63  0.60  0.68  0.60  0.63  0.64  0.62  0.61 ]
[ 0.90  0.72  0.61  0.72  0.90  0.61  0.82  0.78  0.62  0.89  0.69  0.67 ]
[ 0.93  0.90  0.87  0.89  0.83  0.89  0.97  0.97  0.98  0.94  0.86  0.89 ]
[ 0.84  0.88  0.90  0.89  0.87  0.60  0.88  0.60  0.91  0.98  0.98  0.95 ]
[ 0.61  0.89  0.90  0.65  0.73  0.91  0.65  0.68  0.88  0.60  0.67  0.92 ]
[ 0.90  0.66  0.91  0.90  0.89  0.91  0.60  0.90  0.88  0.74  0.87  0.98 ]
[ 0.61  0.91  0.60  0.97  0.77  0.61  0.60  0.63  0.89  0.61  0.90  0.61 ]
[ 0.82  0.90  0.77  0.89  0.79  0.91  0.66  0.90  0.62  0.95  0.97  0.98 ]
[ 0.62  0.67  0.66  0.64  0.64  0.75  0.65  0.67  0.72  0.90  0.84  0.67 ]
[ 0.89  0.80  0.65  0.90  0.76  0.90  0.60  0.91  0.69  0.69  0.91  0.64 ]
[ 0.66  0.89  0.66  0.60  0.75  0.60  0.60  0.69  0.69  0.61  0.61  0.90 ]
[ 0.85  0.91  0.61  0.63  0.74  0.73  0.73  0.96  0.86  0.87  0.97  0.72 ]
[ 0.82  0.60  0.67  0.83  0.65  0.85  0.68  0.69  0.98  0.97  0.70  0.84 ]
[ 0.67  0.90  0.91  0.68  0.90  0.92  0.82  0.65  0.86  0.93  0.78  0.70 ]
[ 0.85  0.73  0.60  0.78  0.70  0.62  0.80  0.62  0.96  0.82  0.78  0.60 ]
[ 0.64  0.65  0.97  0.73  0.80  0.97  0.98  0.65  0.63  0.77  0.91  0.98 ]
[ 0.72  0.61  0.94  0.61  0.89  0.69  0.68  0.66  0.96  0.97  0.66  0.91 ]
[ 0.69  0.92  0.62  0.68  0.88  0.95  0.78  0.63  0.64  0.79  0.89  0.98 ]
[ 0.91  0.73  0.80  0.63  0.89  0.70  0.85  0.87  0.69  0.62  0.92  0.62 ]
[ 0.86  0.64  0.91  0.88  0.87  0.63  0.77  0.88  0.65  0.98  0.91  0.98 ]

01/29 04:23:11 AM | === Batch 4/5
01/29 04:23:11 AM | loss = 0.312 + 2.190 + 0.097 = 2.598
01/29 04:23:12 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.46  0.47  0.69  0.63  0.46  0.49  0.46  0.95  0.46  0.46  0.93  0.52 ]
[ 0.90  0.52  0.54  0.94  0.70  0.86  0.83  0.98  0.48  0.98  0.59  0.96 ]
[ 0.45  0.77  0.46  0.60  0.92  0.85  0.71  0.99  0.57  0.55  0.46  0.63 ]
[ 0.93  0.52  0.70  0.91  0.98  0.98  0.98  0.98  0.68  0.81  0.47  0.90 ]
[ 0.48  0.49  0.48  0.48  0.49  0.47  0.46  0.46  0.46  0.57  0.48  0.64 ]
[ 0.65  0.55  0.97  0.94  0.93  0.85  0.97  0.90  0.98  0.91  0.71  0.98 ]
[ 0.46  0.54  0.55  0.47  0.69  0.45  0.48  0.64  0.64  0.48  0.49  0.85 ]
[ 0.83  0.74  0.98  0.94  0.68  0.45  0.96  0.94  0.87  0.72  0.49  0.98 ]
[ 0.75  0.52  0.46  0.55  0.57  0.48  0.55  0.48  0.46  0.58  0.90  0.79 ]
[ 0.87  0.72  0.91  0.87  0.94  0.45  0.83  0.98  0.82  0.92  0.57  0.50 ]
[ 0.46  0.56  0.46  0.47  0.47  0.54  0.93  0.91  0.75  0.46  0.86  0.49 ]
[ 0.84  0.85  0.62  0.93  0.92  0.49  0.94  0.47  0.93  0.65  0.65  0.85 ]
[ 0.87  0.58  0.92  0.81  0.89  0.90  0.74  0.89  0.47  0.76  0.56  0.58 ]
[ 0.79  0.95  0.90  0.59  0.90  0.53  0.87  0.47  0.98  0.47  0.93  0.96 ]
[ 0.50  0.76  0.47  0.95  0.88  0.67  0.65  0.85  0.91  0.46  0.66  0.47 ]
[ 0.85  0.97  0.90  0.74  0.91  0.47  0.92  0.46  0.90  0.48  0.91  0.96 ]
[ 0.79  0.49  0.48  0.90  0.49  0.46  0.48  0.77  0.46  0.46  0.52  0.56 ]
[ 0.84  0.76  0.55  0.69  0.97  0.49  0.52  0.45  0.60  0.58  0.90  0.90 ]
[ 0.92  0.85  0.92  0.98  0.92  0.52  0.98  0.74  0.73  0.95  0.88  0.93 ]
[ 0.46  0.92  0.93  0.84  0.88  0.83  0.91  0.78  0.89  0.94  0.91  0.94 ]
[ 0.47  0.48  0.45  0.47  0.65  0.47  0.50  0.49  0.65  0.47  0.54  0.55 ]
[ 0.91  0.79  0.57  0.81  0.91  0.76  0.83  0.81  0.84  0.47  0.48  0.54 ]
[ 0.56  0.79  0.59  0.77  0.75  0.48  0.84  0.46  0.79  0.62  0.49  0.52 ]
[ 0.90  0.93  0.81  0.83  0.91  0.86  0.92  0.84  0.87  0.89  0.52  0.56 ]
[ 0.86  0.83  0.83  0.51  0.65  0.45  0.52  0.84  0.50  0.47  0.63  0.46 ]
[ 0.90  0.89  0.86  0.68  0.48  0.74  0.86  0.47  0.94  0.88  0.47  0.65 ]
[ 0.87  0.56  0.46  0.67  0.50  0.54  0.64  0.46  0.46  0.47  0.53  0.45 ]
[ 0.69  0.88  0.89  0.84  0.90  0.88  0.89  0.50  0.47  0.70  0.66  0.52 ]
[ 0.65  0.64  0.45  0.56  0.47  0.45  0.59  0.45  0.47  0.47  0.46  0.45 ]
[ 0.70  0.72  0.89  0.63  0.89  0.80  0.88  0.54  0.65  0.52  0.63  0.56 ]
[ 0.50  0.45  0.90  0.79  0.47  0.55  0.50  0.45  0.94  0.81  0.50  0.78 ]
[ 0.60  0.58  0.86  0.54  0.74  0.47  0.50  0.45  0.52  0.51  0.64  0.53 ]
[ 0.49  0.50  0.67  0.56  0.70  0.47  0.52  0.51  0.59  0.48  0.46  0.47 ]
[ 0.72  0.66  0.83  0.79  0.61  0.66  0.61  0.61  0.70  0.85  0.88  0.63 ]
[ 0.47  0.48  0.65  0.48  0.50  0.47  0.59  0.46  0.50  0.51  0.48  0.52 ]
[ 0.90  0.75  0.46  0.74  0.92  0.63  0.85  0.75  0.49  0.90  0.73  0.60 ]
[ 0.94  0.92  0.85  0.88  0.81  0.89  0.97  0.96  0.98  0.96  0.88  0.90 ]
[ 0.83  0.90  0.92  0.89  0.89  0.46  0.91  0.46  0.92  0.98  0.99  0.96 ]
[ 0.47  0.85  0.92  0.53  0.71  0.88  0.55  0.62  0.81  0.49  0.70  0.92 ]
[ 0.91  0.71  0.92  0.92  0.92  0.90  0.67  0.92  0.91  0.69  0.87  0.98 ]
[ 0.51  0.94  0.46  0.98  0.82  0.48  0.46  0.51  0.84  0.52  0.92  0.46 ]
[ 0.78  0.91  0.73  0.90  0.81  0.92  0.69  0.93  0.48  0.96  0.98  0.98 ]
[ 0.59  0.55  0.55  0.51  0.52  0.79  0.52  0.62  0.74  0.92  0.87  0.68 ]
[ 0.91  0.73  0.56  0.92  0.71  0.89  0.67  0.94  0.60  0.59  0.93  0.59 ]
[ 0.55  0.90  0.70  0.46  0.77  0.46  0.47  0.58  0.58  0.63  0.49  0.92 ]
[ 0.86  0.90  0.47  0.64  0.72  0.68  0.64  0.97  0.89  0.87  0.98  0.75 ]
[ 0.76  0.46  0.60  0.77  0.56  0.80  0.57  0.75  0.98  0.98  0.63  0.82 ]
[ 0.63  0.89  0.92  0.62  0.92  0.94  0.86  0.54  0.86  0.93  0.77  0.76 ]
[ 0.84  0.69  0.46  0.81  0.72  0.56  0.77  0.54  0.97  0.83  0.81  0.46 ]
[ 0.62  0.70  0.98  0.77  0.73  0.97  0.97  0.55  0.49  0.83  0.93  0.98 ]
[ 0.62  0.52  0.92  0.59  0.89  0.58  0.69  0.58  0.95  0.97  0.59  0.90 ]
[ 0.65  0.93  0.55  0.60  0.89  0.96  0.83  0.63  0.52  0.78  0.87  0.98 ]
[ 0.92  0.65  0.77  0.50  0.91  0.60  0.88  0.88  0.62  0.48  0.88  0.51 ]
[ 0.87  0.68  0.92  0.90  0.86  0.53  0.78  0.90  0.70  0.98  0.93  0.98 ]

01/29 04:23:12 AM | === Batch 5/5
01/29 04:23:13 AM | loss = 1.253 + 1.409 + 0.111 = 2.773
01/29 04:23:14 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.32  0.50  0.62  0.66  0.32  0.46  0.32  0.95  0.32  0.42  0.92  0.43 ]
[ 0.88  0.42  0.54  0.95  0.71  0.83  0.76  0.99  0.40  0.99  0.58  0.97 ]
[ 0.36  0.78  0.32  0.61  0.93  0.77  0.65  0.99  0.50  0.50  0.35  0.50 ]
[ 0.92  0.41  0.76  0.89  0.99  0.98  0.98  0.99  0.70  0.77  0.36  0.91 ]
[ 0.43  0.46  0.36  0.36  0.55  0.42  0.32  0.48  0.32  0.54  0.35  0.70 ]
[ 0.66  0.43  0.98  0.93  0.94  0.88  0.97  0.90  0.98  0.91  0.69  0.98 ]
[ 0.32  0.45  0.46  0.33  0.75  0.32  0.51  0.57  0.63  0.36  0.35  0.80 ]
[ 0.80  0.66  0.99  0.94  0.63  0.32  0.97  0.94  0.86  0.67  0.36  0.98 ]
[ 0.77  0.43  0.32  0.47  0.63  0.36  0.45  0.41  0.32  0.49  0.89  0.68 ]
[ 0.85  0.62  0.93  0.83  0.95  0.31  0.78  0.99  0.77  0.91  0.47  0.44 ]
[ 0.32  0.46  0.32  0.33  0.48  0.42  0.92  0.92  0.76  0.32  0.89  0.36 ]
[ 0.80  0.83  0.66  0.92  0.92  0.36  0.93  0.36  0.94  0.58  0.63  0.86 ]
[ 0.82  0.46  0.94  0.74  0.92  0.92  0.65  0.86  0.33  0.67  0.59  0.46 ]
[ 0.72  0.96  0.93  0.48  0.90  0.41  0.82  0.36  0.98  0.34  0.94  0.97 ]
[ 0.39  0.68  0.36  0.96  0.87  0.61  0.60  0.83  0.92  0.32  0.62  0.34 ]
[ 0.80  0.98  0.92  0.66  0.92  0.34  0.92  0.35  0.87  0.38  0.92  0.97 ]
[ 0.79  0.38  0.37  0.91  0.39  0.35  0.36  0.68  0.31  0.31  0.38  0.46 ]
[ 0.80  0.79  0.58  0.57  0.98  0.36  0.39  0.32  0.51  0.48  0.91  0.91 ]
[ 0.90  0.82  0.94  0.98  0.92  0.56  0.98  0.65  0.66  0.96  0.90  0.92 ]
[ 0.31  0.95  0.95  0.80  0.84  0.85  0.91  0.82  0.88  0.96  0.91  0.94 ]
[ 0.34  0.34  0.31  0.35  0.58  0.36  0.37  0.35  0.70  0.39  0.48  0.49 ]
[ 0.94  0.84  0.59  0.77  0.90  0.80  0.82  0.82  0.80  0.35  0.36  0.45 ]
[ 0.43  0.71  0.62  0.72  0.80  0.35  0.79  0.33  0.72  0.67  0.49  0.40 ]
[ 0.93  0.95  0.84  0.84  0.90  0.90  0.93  0.87  0.85  0.92  0.39  0.45 ]
[ 0.89  0.77  0.78  0.44  0.72  0.31  0.42  0.79  0.39  0.37  0.56  0.33 ]
[ 0.92  0.93  0.89  0.62  0.35  0.80  0.87  0.34  0.93  0.86  0.34  0.72 ]
[ 0.84  0.47  0.35  0.59  0.40  0.55  0.69  0.32  0.32  0.35  0.40  0.31 ]
[ 0.73  0.91  0.92  0.80  0.89  0.91  0.90  0.53  0.38  0.59  0.60  0.57 ]
[ 0.54  0.52  0.31  0.44  0.38  0.33  0.47  0.40  0.33  0.35  0.32  0.31 ]
[ 0.74  0.74  0.91  0.55  0.88  0.84  0.90  0.57  0.55  0.53  0.68  0.61 ]
[ 0.39  0.31  0.87  0.71  0.34  0.43  0.45  0.34  0.94  0.74  0.51  0.70 ]
[ 0.59  0.64  0.86  0.57  0.71  0.34  0.36  0.37  0.49  0.41  0.58  0.59 ]
[ 0.39  0.36  0.72  0.44  0.71  0.33  0.41  0.49  0.57  0.51  0.31  0.33 ]
[ 0.76  0.66  0.86  0.75  0.48  0.69  0.53  0.61  0.60  0.87  0.85  0.65 ]
[ 0.50  0.41  0.71  0.35  0.36  0.38  0.64  0.32  0.52  0.40  0.36  0.43 ]
[ 0.92  0.78  0.34  0.72  0.93  0.68  0.87  0.68  0.36  0.89  0.69  0.50 ]
[ 0.95  0.92  0.89  0.90  0.75  0.90  0.97  0.96  0.99  0.97  0.88  0.90 ]
[ 0.87  0.91  0.92  0.90  0.89  0.32  0.89  0.32  0.90  0.99  0.99  0.97 ]
[ 0.34  0.85  0.92  0.55  0.68  0.82  0.45  0.66  0.74  0.39  0.70  0.93 ]
[ 0.94  0.72  0.91  0.93  0.93  0.89  0.61  0.93  0.93  0.73  0.90  0.99 ]
[ 0.50  0.95  0.32  0.98  0.87  0.38  0.32  0.38  0.76  0.40  0.93  0.48 ]
[ 0.79  0.91  0.65  0.92  0.84  0.90  0.70  0.93  0.51  0.97  0.99  0.98 ]
[ 0.65  0.45  0.56  0.39  0.58  0.73  0.54  0.64  0.70  0.92  0.91  0.68 ]
[ 0.94  0.71  0.45  0.92  0.72  0.85  0.65  0.94  0.52  0.65  0.93  0.55 ]
[ 0.46  0.88  0.74  0.50  0.82  0.31  0.50  0.46  0.51  0.56  0.47  0.91 ]
[ 0.85  0.91  0.46  0.61  0.66  0.74  0.68  0.98  0.88  0.83  0.99  0.81 ]
[ 0.69  0.31  0.52  0.77  0.58  0.81  0.59  0.72  0.98  0.97  0.53  0.81 ]
[ 0.64  0.90  0.90  0.62  0.92  0.96  0.90  0.43  0.88  0.92  0.71  0.78 ]
[ 0.79  0.74  0.34  0.77  0.77  0.48  0.71  0.43  0.96  0.78  0.84  0.32 ]
[ 0.69  0.67  0.98  0.83  0.71  0.97  0.98  0.50  0.53  0.87  0.94  0.97 ]
[ 0.65  0.40  0.89  0.54  0.91  0.59  0.64  0.61  0.95  0.98  0.64  0.88 ]
[ 0.65  0.92  0.45  0.50  0.91  0.96  0.84  0.57  0.54  0.76  0.90  0.98 ]
[ 0.92  0.67  0.71  0.50  0.89  0.61  0.91  0.86  0.67  0.47  0.83  0.40 ]
[ 0.83  0.64  0.92  0.92  0.85  0.41  0.75  0.91  0.65  0.98  0.92  0.98 ]

01/29 04:23:14 AM | ===
Best loss was 2.77 at iteration 5

01/29 04:23:14 AM | Looking for optimal threshold...
01/29 04:23:14 AM | Testing threshold 0.5
01/29 04:23:14 AM | Distance to target: 24,289,728
01/29 04:23:14 AM | Testing threshold 0.75
01/29 04:23:14 AM | Distance to target: 23,411,136
01/29 04:23:14 AM | Testing threshold 0.625
01/29 04:23:14 AM | Distance to target: 4,740,928
01/29 04:23:14 AM | Testing threshold 0.5625
01/29 04:23:14 AM | Distance to target: 7,166,656
01/29 04:23:14 AM | Testing threshold 0.59375
01/29 04:23:14 AM | Distance to target: 96,512
01/29 04:23:14 AM | Testing threshold 0.578125
01/29 04:23:14 AM | Distance to target: 3,553,984
01/29 04:23:14 AM | Testing threshold 0.5859375
01/29 04:23:14 AM | Distance to target: 1,712,448
01/29 04:23:14 AM | Testing threshold 0.58984375
01/29 04:23:14 AM | Distance to target: 1,140,032
01/29 04:23:14 AM | Testing threshold 0.591796875
01/29 04:23:14 AM | Distance to target: 830,912
01/29 04:23:14 AM | Testing threshold 0.5927734375
01/29 04:23:14 AM | Distance to target: 263,360
01/29 04:23:14 AM | Testing threshold 0.59326171875
01/29 04:23:14 AM | Distance to target: 69,184
01/29 04:23:14 AM | Testing threshold 0.593505859375
01/29 04:23:14 AM | Distance to target: 2,240
01/29 04:23:17 AM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  1.00  1.00  0.00  0.00  0.00  1.00  0.00  0.00  1.00  0.00 ]
[ 1.00  0.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00 ]
[ 0.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  0.00  1.00 ]
[ 1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00 ]
[ 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00 ]
[ 1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  0.00  1.00  0.00  0.00  1.00  1.00  0.00  0.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  0.00  1.00 ]
[ 1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  0.00  0.00 ]
[ 0.00  0.00  0.00  0.00  0.00  0.00  1.00  1.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00 ]
[ 1.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00 ]
[ 0.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  0.00  0.00  1.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00 ]
[ 1.00  1.00  0.00  1.00  1.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  0.00 ]
[ 0.00  1.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00 ]
[ 1.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  0.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  0.00  1.00  1.00  0.00  1.00  1.00  0.00  1.00 ]
[ 1.00  0.00  0.00  1.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  1.00  1.00  0.00 ]
[ 1.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00 ]
[ 0.00  0.00  1.00  1.00  0.00  0.00  0.00  0.00  1.00  1.00  0.00  1.00 ]
[ 1.00  0.00  1.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00 ]
[ 0.00  0.00  1.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  1.00  0.00  1.00  1.00  0.00  1.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  0.00  1.00  1.00  0.00  0.00  0.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00 ]
[ 0.00  1.00  1.00  0.00  1.00  0.00  0.00  0.00  0.00  1.00  0.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  1.00  1.00  1.00 ]
[ 1.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00  0.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00 ]

01/29 04:23:17 AM | ResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(6, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(10, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (1): BasicBlock(
      (conv1): Conv2d(16, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(16, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(2, 15, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(15, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(4, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(4, 13, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(13, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(4, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(16, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(11, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(16, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 13, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(13, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(4, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(27, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(27, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(32, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(32, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(12, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(32, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(14, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(32, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(11, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(32, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(11, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(32, 13, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(13, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(13, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(32, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(11, 28, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(28, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(32, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(32, 55, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(55, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(55, 59, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(59, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 41, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(41, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(41, 54, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(54, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(64, 37, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(37, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(37, 54, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(54, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(64, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(35, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(35, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(64, 44, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(44, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(44, 51, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(64, 49, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(49, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(49, 52, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(52, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(64, 51, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(51, 55, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(55, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(64, 44, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(44, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(44, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(64, 53, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(53, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(53, 52, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(52, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (linear): Linear(in_features=64, out_features=10, bias=True)
)
01/29 04:23:24 AM | ----------------------------------------
01/29 04:23:24 AM | Performances input model:
01/29 04:23:24 AM |  - flops: 126,554,816
01/29 04:23:24 AM |  - params: 853,018
01/29 04:23:24 AM |  - accuracy: 93.2699966430664
01/29 04:23:24 AM | ----------------------------------------
01/29 04:23:24 AM | Performances pseudo-pruned model:
01/29 04:23:24 AM |  - flops: 126,554,816
01/29 04:23:24 AM |  - params: 853,018
01/29 04:23:24 AM |  - accuracy: 38.27000045776367
01/29 04:23:24 AM | ----------------------------------------
01/29 04:23:24 AM | Performances pruned model:
01/29 04:23:24 AM |  - flops: 55,842,240
01/29 04:23:24 AM |  - params: 488,015
01/29 04:23:24 AM |  - accuracy: 38.27000045776367
01/29 04:23:24 AM | ----------------------------------------
01/29 04:23:24 AM | Total time: 26.72s
