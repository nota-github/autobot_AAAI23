01/29 09:42:38 PM | args = Namespace(output_dir='result/rebuttal/nb_epoch/resnet56/nbbtchs8/seed_00', loaded_model_path='./checkpoints/cifar10/resnet_56.pt', resume=False, test_only=False, mode='prune', batch_size=64, nb_batches=8, Mflops_target=None, lr=0.6, momentum=0.9, beta=6, gamma=0.4, gpu='0', num_workers=4, dataset='cifar10', arch='resnet_56', save_plot=False, seed=0, lr_finetuning=0.02, epoch_finetuning=200, wd=0.002, data_dir='./data/cifar10/', print_freq=200, num_classes=10, device_ids=[0], device=device(type='cuda', index=0), name_base='')
01/29 09:42:44 PM | ----------------------------------------
01/29 09:42:44 PM | ==> Building model...
01/29 09:42:44 PM | ----------------------------------------
01/29 09:42:44 PM | ==> Loading weights into the model...
01/29 09:42:44 PM | ----------------------------------------
01/29 09:42:44 PM | ResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (1): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (linear): Linear(in_features=64, out_features=10, bias=True)
)
01/29 09:42:46 PM | Save modules info...
01/29 09:42:46 PM | FLOPS pruning ratio is 0.56
01/29 09:42:46 PM | Pruning with information flow
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [1]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [1]
01/29 09:42:46 PM | cout: [1]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [1]
01/29 09:42:46 PM | cout: [1]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [1]
01/29 09:42:46 PM | cout: [2]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [2]
01/29 09:42:46 PM | cout: [2]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [3]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [3]
01/29 09:42:46 PM | cout: [3]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [3]
01/29 09:42:46 PM | cout: [3]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [3]
01/29 09:42:46 PM | cout: [4]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [4]
01/29 09:42:46 PM | cout: [4]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [5]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [5]
01/29 09:42:46 PM | cout: [5]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [5]
01/29 09:42:46 PM | cout: [5]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [5]
01/29 09:42:46 PM | cout: [6]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [6]
01/29 09:42:46 PM | cout: [6]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [7]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [7]
01/29 09:42:46 PM | cout: [7]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [7]
01/29 09:42:46 PM | cout: [7]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [7]
01/29 09:42:46 PM | cout: [8]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [8]
01/29 09:42:46 PM | cout: [8]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [9]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [9]
01/29 09:42:46 PM | cout: [9]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [9]
01/29 09:42:46 PM | cout: [9]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [9]
01/29 09:42:46 PM | cout: [10]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [10]
01/29 09:42:46 PM | cout: [10]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [11]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [11]
01/29 09:42:46 PM | cout: [11]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [11]
01/29 09:42:46 PM | cout: [11]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [11]
01/29 09:42:46 PM | cout: [12]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [12]
01/29 09:42:46 PM | cout: [12]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [13]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [13]
01/29 09:42:46 PM | cout: [13]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [13]
01/29 09:42:46 PM | cout: [13]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [13]
01/29 09:42:46 PM | cout: [14]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [14]
01/29 09:42:46 PM | cout: [14]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [15]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [15]
01/29 09:42:46 PM | cout: [15]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [15]
01/29 09:42:46 PM | cout: [15]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [15]
01/29 09:42:46 PM | cout: [16]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [16]
01/29 09:42:46 PM | cout: [16]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [17]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [17]
01/29 09:42:46 PM | cout: [17]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [17]
01/29 09:42:46 PM | cout: [17]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [17]
01/29 09:42:46 PM | cout: [18]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [18]
01/29 09:42:46 PM | cout: [18]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [19]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [19]
01/29 09:42:46 PM | cout: [19]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [19]
01/29 09:42:46 PM | cout: [19]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [19]
01/29 09:42:46 PM | cout: [20]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [20]
01/29 09:42:46 PM | cout: [20]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [21]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [21]
01/29 09:42:46 PM | cout: [21]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [21]
01/29 09:42:46 PM | cout: [21]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [21]
01/29 09:42:46 PM | cout: [22]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [22]
01/29 09:42:46 PM | cout: [22]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [23]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [23]
01/29 09:42:46 PM | cout: [23]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [23]
01/29 09:42:46 PM | cout: [23]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [23]
01/29 09:42:46 PM | cout: [24]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [24]
01/29 09:42:46 PM | cout: [24]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [25]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [25]
01/29 09:42:46 PM | cout: [25]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [25]
01/29 09:42:46 PM | cout: [25]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [25]
01/29 09:42:46 PM | cout: [26]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [26]
01/29 09:42:46 PM | cout: [26]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [27]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [27]
01/29 09:42:46 PM | cout: [27]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [27]
01/29 09:42:46 PM | cout: [27]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [27]
01/29 09:42:46 PM | cout: [28]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [28]
01/29 09:42:46 PM | cout: [28]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [29]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [29]
01/29 09:42:46 PM | cout: [29]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [29]
01/29 09:42:46 PM | cout: [29]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [29]
01/29 09:42:46 PM | cout: [30]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [30]
01/29 09:42:46 PM | cout: [30]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [31]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [31]
01/29 09:42:46 PM | cout: [31]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [31]
01/29 09:42:46 PM | cout: [31]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [31]
01/29 09:42:46 PM | cout: [32]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [32]
01/29 09:42:46 PM | cout: [32]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [33]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [33]
01/29 09:42:46 PM | cout: [33]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [33]
01/29 09:42:46 PM | cout: [33]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [33]
01/29 09:42:46 PM | cout: [34]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [34]
01/29 09:42:46 PM | cout: [34]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [35]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [35]
01/29 09:42:46 PM | cout: [35]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [35]
01/29 09:42:46 PM | cout: [35]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [35]
01/29 09:42:46 PM | cout: [36]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [36]
01/29 09:42:46 PM | cout: [36]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [37]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [37]
01/29 09:42:46 PM | cout: [37]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [37]
01/29 09:42:46 PM | cout: [37]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [37]
01/29 09:42:46 PM | cout: [38]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [38]
01/29 09:42:46 PM | cout: [38]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [39]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [39]
01/29 09:42:46 PM | cout: [39]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [39]
01/29 09:42:46 PM | cout: [39]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [39]
01/29 09:42:46 PM | cout: [40]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [40]
01/29 09:42:46 PM | cout: [40]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [41]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [41]
01/29 09:42:46 PM | cout: [41]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [41]
01/29 09:42:46 PM | cout: [41]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [41]
01/29 09:42:46 PM | cout: [42]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [42]
01/29 09:42:46 PM | cout: [42]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [43]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [43]
01/29 09:42:46 PM | cout: [43]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [43]
01/29 09:42:46 PM | cout: [43]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [43]
01/29 09:42:46 PM | cout: [44]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [44]
01/29 09:42:46 PM | cout: [44]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [45]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [45]
01/29 09:42:46 PM | cout: [45]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [45]
01/29 09:42:46 PM | cout: [45]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [45]
01/29 09:42:46 PM | cout: [46]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [46]
01/29 09:42:46 PM | cout: [46]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [47]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [47]
01/29 09:42:46 PM | cout: [47]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [47]
01/29 09:42:46 PM | cout: [47]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [47]
01/29 09:42:46 PM | cout: [48]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [48]
01/29 09:42:46 PM | cout: [48]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [49]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [49]
01/29 09:42:46 PM | cout: [49]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [49]
01/29 09:42:46 PM | cout: [49]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [49]
01/29 09:42:46 PM | cout: [50]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [50]
01/29 09:42:46 PM | cout: [50]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [51]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [51]
01/29 09:42:46 PM | cout: [51]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [51]
01/29 09:42:46 PM | cout: [51]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [51]
01/29 09:42:46 PM | cout: [52]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [52]
01/29 09:42:46 PM | cout: [52]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: [53]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [53]
01/29 09:42:46 PM | cout: [53]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: [53]
01/29 09:42:46 PM | cout: [53]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
01/29 09:42:46 PM | cin: [53]
01/29 09:42:46 PM | cout: [54]
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:42:46 PM | cin: [54]
01/29 09:42:46 PM | cout: [54]
01/29 09:42:46 PM | active
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: ReLU(inplace=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: AdaptiveAvgPool2d(output_size=(1, 1))
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | -----
01/29 09:42:46 PM | module: Linear(in_features=64, out_features=10, bias=True)
01/29 09:42:46 PM | cin: None
01/29 09:42:46 PM | cout: None
01/29 09:42:46 PM | inactive
01/29 09:42:46 PM | Used masks: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
01/29 09:42:46 PM | 55 unique masks in total
01/29 09:42:46 PM | === Batch 1/8
01/29 09:42:47 PM | loss = 0.145 + 4.444 + 0.040 = 4.629
01/29 09:42:48 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.94  0.94  0.94  0.94  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.94  0.94  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.94  0.94  0.83  0.94  0.83  0.83  0.94  0.83 ]
[ 0.83  0.94  0.94  0.83  0.83  0.83  0.94  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.94  0.83  0.94  0.94  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.94  0.94  0.83  0.94  0.83  0.94  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.94  0.94  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.94  0.83  0.94  0.94  0.83  0.83  0.94  0.83  0.94  0.94  0.94  0.94 ]
[ 0.83  0.83  0.94  0.94  0.83  0.83  0.83  0.94  0.83  0.94  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.94  0.83  0.94  0.83  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.83  0.94 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.94  0.83  0.94  0.83  0.83  0.94  0.94  0.94  0.94  0.83  0.94 ]
[ 0.83  0.94  0.83  0.83  0.94  0.83  0.94  0.83  0.94  0.94  0.94  0.94 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.83  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.94  0.94  0.83  0.83  0.83  0.83  0.94  0.94 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.94  0.83  0.94  0.94  0.83  0.83  0.83  0.83  0.94  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.94  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.94  0.94  0.83  0.83 ]
[ 0.94  0.83  0.94  0.83  0.94  0.83  0.94  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83 ]
[ 0.94  0.94  0.94  0.83  0.83  0.83  0.94  0.94  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.94  0.83  0.83 ]
[ 0.94  0.94  0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.94 ]
[ 0.94  0.83  0.83  0.94  0.83  0.83  0.94  0.94  0.83  0.83  0.94  0.83 ]
[ 0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.94  0.83  0.83  0.83  0.94 ]

01/29 09:42:48 PM | === Batch 2/8
01/29 09:42:49 PM | loss = 0.222 + 3.844 + 0.055 = 4.121
01/29 09:42:50 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.73  0.74  0.73  0.75  0.74  0.74  0.73  0.95  0.73  0.75  0.93  0.73 ]
[ 0.73  0.74  0.73  0.88  0.82  0.91  0.97  0.76  0.73  0.88  0.73  0.96 ]
[ 0.73  0.73  0.73  0.73  0.75  0.74  0.75  0.96  0.74  0.74  0.74  0.75 ]
[ 0.73  0.92  0.74  0.73  0.96  0.96  0.97  0.95  0.74  0.75  0.74  0.95 ]
[ 0.74  0.75  0.73  0.73  0.93  0.73  0.73  0.74  0.73  0.73  0.73  0.75 ]
[ 0.74  0.73  0.93  0.74  0.75  0.91  0.97  0.75  0.97  0.87  0.75  0.96 ]
[ 0.73  0.73  0.73  0.73  0.93  0.73  0.73  0.75  0.92  0.74  0.73  0.81 ]
[ 0.76  0.80  0.93  0.87  0.73  0.73  0.95  0.75  0.73  0.84  0.73  0.96 ]
[ 0.75  0.73  0.73  0.75  0.93  0.73  0.75  0.75  0.73  0.75  0.97  0.73 ]
[ 0.84  0.81  0.75  0.73  0.88  0.73  0.74  0.93  0.88  0.88  0.92  0.73 ]
[ 0.73  0.92  0.73  0.74  0.73  0.73  0.87  0.84  0.73  0.73  0.93  0.73 ]
[ 0.82  0.93  0.73  0.83  0.81  0.73  0.89  0.74  0.97  0.81  0.75  0.95 ]
[ 0.73  0.74  0.86  0.84  0.92  0.93  0.79  0.96  0.74  0.75  0.93  0.74 ]
[ 0.80  0.95  0.96  0.73  0.79  0.76  0.97  0.74  0.97  0.73  0.88  0.96 ]
[ 0.75  0.88  0.73  0.94  0.81  0.93  0.93  0.81  0.94  0.73  0.74  0.75 ]
[ 0.85  0.95  0.93  0.73  0.94  0.73  0.96  0.74  0.97  0.76  0.88  0.96 ]
[ 0.73  0.73  0.74  0.86  0.75  0.73  0.73  0.75  0.73  0.73  0.78  0.75 ]
[ 0.85  0.94  0.93  0.73  0.95  0.73  0.76  0.73  0.88  0.77  0.87  0.92 ]
[ 0.95  0.86  0.95  0.96  0.87  0.86  0.97  0.79  0.96  0.95  0.96  0.97 ]
[ 0.73  0.81  0.96  0.92  0.79  0.73  0.87  0.97  0.85  0.96  0.88  0.85 ]
[ 0.76  0.73  0.73  0.73  0.78  0.73  0.92  0.87  0.92  0.83  0.73  0.75 ]
[ 0.76  0.73  0.76  0.75  0.85  0.74  0.88  0.96  0.83  0.74  0.73  0.74 ]
[ 0.73  0.81  0.73  0.74  0.73  0.73  0.74  0.74  0.75  0.75  0.73  0.73 ]
[ 0.76  0.74  0.94  0.74  0.82  0.75  0.82  0.93  0.84  0.73  0.85  0.74 ]
[ 0.94  0.85  0.79  0.73  0.83  0.73  0.73  0.87  0.73  0.84  0.79  0.73 ]
[ 0.75  0.74  0.92  0.74  0.79  0.74  0.82  0.80  0.93  0.87  0.78  0.93 ]
[ 0.84  0.74  0.73  0.73  0.92  0.76  0.94  0.73  0.96  0.74  0.79  0.73 ]
[ 0.76  0.77  0.94  0.73  0.84  0.75  0.74  0.73  0.74  0.78  0.81  0.92 ]
[ 0.73  0.73  0.73  0.74  0.74  0.73  0.73  0.73  0.76  0.75  0.73  0.73 ]
[ 0.76  0.75  0.94  0.73  0.84  0.73  0.79  0.74  0.73  0.73  0.76  0.95 ]
[ 0.74  0.73  0.88  0.77  0.74  0.74  0.74  0.74  0.94  0.97  0.74  0.95 ]
[ 0.74  0.81  0.93  0.73  0.75  0.74  0.73  0.73  0.81  0.75  0.75  0.73 ]
[ 0.73  0.76  0.75  0.75  0.74  0.73  0.74  0.75  0.76  0.73  0.73  0.73 ]
[ 0.76  0.79  0.92  0.74  0.73  0.73  0.81  0.73  0.74  0.73  0.74  0.94 ]
[ 0.75  0.78  0.75  0.73  0.73  0.81  0.93  0.73  0.75  0.93  0.73  0.73 ]
[ 0.75  0.76  0.73  0.74  0.86  0.74  0.73  0.74  0.74  0.75  0.73  0.73 ]
[ 0.95  0.95  0.76  0.94  0.88  0.86  0.96  0.95  0.93  0.95  0.77  0.94 ]
[ 0.80  0.96  0.79  0.76  0.96  0.73  0.92  0.73  0.95  0.92  0.96  0.96 ]
[ 0.73  0.91  0.87  0.86  0.74  0.73  0.73  0.93  0.96  0.74  0.74  0.74 ]
[ 0.75  0.97  0.74  0.75  0.95  0.93  0.73  0.88  0.76  0.76  0.96  0.92 ]
[ 0.80  0.96  0.73  0.75  0.74  0.74  0.73  0.81  0.74  0.76  0.97  0.88 ]
[ 0.78  0.74  0.95  0.74  0.96  0.95  0.75  0.77  0.79  0.84  0.97  0.96 ]
[ 0.73  0.74  0.73  0.74  0.73  0.76  0.95  0.95  0.96  0.73  0.74  0.74 ]
[ 0.73  0.74  0.94  0.73  0.74  0.92  0.74  0.97  0.84  0.73  0.83  0.73 ]
[ 0.74  0.86  0.73  0.85  0.84  0.73  0.73  0.96  0.81  0.73  0.95  0.92 ]
[ 0.74  0.73  0.75  0.74  0.75  0.84  0.87  0.95  0.74  0.75  0.96  0.73 ]
[ 0.87  0.73  0.92  0.74  0.73  0.77  0.82  0.94  0.94  0.95  0.73  0.78 ]
[ 0.95  0.74  0.94  0.74  0.96  0.75  0.91  0.73  0.76  0.85  0.74  0.73 ]
[ 0.73  0.74  0.73  0.92  0.75  0.80  0.84  0.74  0.95  0.74  0.74  0.73 ]
[ 0.94  0.94  0.95  0.85  0.74  0.73  0.96  0.92  0.96  0.74  0.77  0.96 ]
[ 0.81  0.85  0.95  0.74  0.74  0.81  0.78  0.86  0.96  0.96  0.74  0.88 ]
[ 0.93  0.97  0.74  0.87  0.95  0.74  0.74  0.95  0.73  0.74  0.75  0.95 ]
[ 0.95  0.73  0.75  0.92  0.74  0.85  0.93  0.96  0.77  0.74  0.95  0.74 ]
[ 0.73  0.96  0.73  0.74  0.95  0.73  0.73  0.95  0.74  0.82  0.88  0.96 ]

01/29 09:42:50 PM | === Batch 3/8
01/29 09:42:51 PM | loss = 0.587 + 3.077 + 0.074 = 3.738
01/29 09:42:52 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.60  0.72  0.62  0.66  0.62  0.65  0.60  0.94  0.60  0.63  0.91  0.60 ]
[ 0.60  0.62  0.61  0.91  0.86  0.86  0.98  0.75  0.71  0.91  0.64  0.95 ]
[ 0.61  0.62  0.61  0.67  0.66  0.62  0.77  0.97  0.62  0.62  0.63  0.63 ]
[ 0.61  0.91  0.62  0.73  0.98  0.95  0.98  0.95  0.73  0.76  0.68  0.93 ]
[ 0.62  0.63  0.60  0.62  0.89  0.64  0.60  0.62  0.60  0.63  0.60  0.66 ]
[ 0.64  0.60  0.89  0.76  0.71  0.87  0.98  0.63  0.97  0.90  0.70  0.95 ]
[ 0.60  0.60  0.60  0.61  0.89  0.60  0.67  0.64  0.87  0.61  0.61  0.82 ]
[ 0.80  0.83  0.90  0.91  0.72  0.60  0.95  0.64  0.61  0.85  0.60  0.95 ]
[ 0.70  0.60  0.60  0.64  0.90  0.62  0.64  0.64  0.60  0.64  0.98  0.63 ]
[ 0.88  0.83  0.64  0.70  0.92  0.60  0.74  0.91  0.87  0.91  0.88  0.63 ]
[ 0.60  0.87  0.60  0.61  0.60  0.65  0.91  0.88  0.68  0.60  0.91  0.61 ]
[ 0.86  0.90  0.64  0.86  0.86  0.60  0.93  0.61  0.97  0.81  0.65  0.93 ]
[ 0.60  0.61  0.90  0.83  0.88  0.91  0.79  0.98  0.61  0.65  0.92  0.63 ]
[ 0.80  0.95  0.96  0.60  0.70  0.70  0.98  0.62  0.98  0.60  0.91  0.95 ]
[ 0.70  0.92  0.60  0.94  0.86  0.90  0.90  0.85  0.93  0.60  0.63  0.63 ]
[ 0.88  0.95  0.89  0.62  0.91  0.62  0.96  0.63  0.97  0.65  0.91  0.96 ]
[ 0.73  0.60  0.63  0.89  0.64  0.60  0.61  0.63  0.60  0.60  0.70  0.63 ]
[ 0.89  0.92  0.91  0.61  0.94  0.61  0.65  0.60  0.85  0.69  0.90  0.88 ]
[ 0.97  0.89  0.93  0.97  0.88  0.85  0.97  0.74  0.95  0.95  0.95  0.98 ]
[ 0.60  0.85  0.96  0.94  0.74  0.77  0.91  0.97  0.89  0.97  0.92  0.83 ]
[ 0.65  0.61  0.60  0.61  0.83  0.60  0.87  0.89  0.87  0.81  0.61  0.65 ]
[ 0.66  0.77  0.66  0.80  0.87  0.79  0.92  0.94  0.84  0.76  0.60  0.61 ]
[ 0.60  0.75  0.60  0.66  0.70  0.62  0.76  0.64  0.65  0.65  0.70  0.62 ]
[ 0.66  0.75  0.92  0.76  0.83  0.79  0.87  0.90  0.88  0.62  0.88  0.63 ]
[ 0.92  0.90  0.71  0.60  0.80  0.60  0.63  0.86  0.65  0.79  0.71  0.61 ]
[ 0.65  0.78  0.88  0.75  0.71  0.76  0.85  0.73  0.90  0.90  0.73  0.93 ]
[ 0.84  0.64  0.61  0.61  0.87  0.65  0.92  0.60  0.95  0.62  0.73  0.60 ]
[ 0.66  0.82  0.93  0.75  0.87  0.80  0.72  0.62  0.63  0.78  0.76  0.89 ]
[ 0.60  0.60  0.60  0.73  0.61  0.60  0.61  0.60  0.65  0.65  0.60  0.60 ]
[ 0.66  0.77  0.92  0.77  0.86  0.76  0.80  0.62  0.62  0.76  0.66  0.95 ]
[ 0.62  0.60  0.93  0.68  0.61  0.62  0.61  0.62  0.92  0.98  0.62  0.94 ]
[ 0.63  0.84  0.90  0.70  0.67  0.67  0.63  0.61  0.75  0.79  0.63  0.72 ]
[ 0.61  0.69  0.64  0.64  0.64  0.61  0.73  0.63  0.73  0.60  0.60  0.61 ]
[ 0.66  0.82  0.89  0.73  0.61  0.76  0.84  0.62  0.63  0.72  0.64  0.94 ]
[ 0.71  0.68  0.67  0.60  0.61  0.78  0.90  0.65  0.63  0.90  0.62  0.60 ]
[ 0.66  0.79  0.61  0.77  0.90  0.67  0.78  0.75  0.62  0.71  0.64  0.61 ]
[ 0.96  0.96  0.67  0.92  0.91  0.88  0.96  0.95  0.95  0.96  0.78  0.94 ]
[ 0.83  0.95  0.75  0.79  0.97  0.60  0.93  0.60  0.96  0.88  0.98  0.96 ]
[ 0.70  0.87  0.91  0.90  0.61  0.60  0.70  0.90  0.96  0.73  0.63  0.70 ]
[ 0.64  0.96  0.76  0.70  0.95  0.90  0.79  0.89  0.80  0.67  0.98  0.89 ]
[ 0.73  0.97  0.60  0.65  0.72  0.65  0.60  0.75  0.63  0.77  0.98  0.90 ]
[ 0.80  0.69  0.96  0.72  0.95  0.95  0.64  0.68  0.81  0.88  0.98  0.97 ]
[ 0.74  0.64  0.60  0.63  0.60  0.66  0.95  0.94  0.95  0.60  0.78  0.72 ]
[ 0.73  0.81  0.92  0.78  0.66  0.89  0.80  0.98  0.79  0.62  0.87  0.62 ]
[ 0.75  0.86  0.66  0.81  0.84  0.60  0.61  0.97  0.83  0.64  0.93  0.92 ]
[ 0.77  0.74  0.63  0.79  0.67  0.86  0.86  0.95  0.73  0.65  0.97  0.78 ]
[ 0.84  0.60  0.92  0.65  0.62  0.69  0.82  0.95  0.92  0.96  0.62  0.69 ]
[ 0.95  0.78  0.93  0.64  0.97  0.64  0.91  0.60  0.68  0.80  0.61  0.74 ]
[ 0.60  0.61  0.61  0.89  0.77  0.72  0.86  0.62  0.95  0.61  0.63  0.60 ]
[ 0.92  0.92  0.96  0.89  0.61  0.77  0.97  0.89  0.96  0.65  0.80  0.95 ]
[ 0.80  0.85  0.96  0.77  0.61  0.75  0.73  0.87  0.96  0.97  0.63  0.84 ]
[ 0.91  0.96  0.61  0.88  0.96  0.62  0.70  0.95  0.61  0.64  0.64  0.95 ]
[ 0.94  0.63  0.63  0.88  0.79  0.83  0.92  0.97  0.68  0.65  0.95  0.63 ]
[ 0.77  0.95  0.70  0.76  0.96  0.60  0.67  0.93  0.79  0.76  0.91  0.95 ]

01/29 09:42:52 PM | === Batch 4/8
01/29 09:42:52 PM | loss = 0.720 + 2.288 + 0.094 = 3.102
01/29 09:42:54 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.46  0.76  0.51  0.69  0.50  0.65  0.46  0.96  0.46  0.65  0.90  0.47 ]
[ 0.55  0.52  0.50  0.94  0.84  0.79  0.98  0.81  0.73  0.92  0.67  0.95 ]
[ 0.49  0.51  0.47  0.71  0.70  0.52  0.81  0.98  0.65  0.60  0.51  0.65 ]
[ 0.55  0.87  0.68  0.78  0.99  0.95  0.98  0.97  0.79  0.81  0.61  0.93 ]
[ 0.49  0.62  0.48  0.51  0.89  0.65  0.46  0.63  0.46  0.66  0.47  0.71 ]
[ 0.52  0.47  0.87  0.82  0.65  0.81  0.97  0.66  0.96  0.90  0.72  0.96 ]
[ 0.53  0.47  0.47  0.49  0.88  0.45  0.73  0.52  0.84  0.47  0.47  0.77 ]
[ 0.81  0.81  0.92  0.94  0.76  0.46  0.96  0.65  0.64  0.81  0.51  0.96 ]
[ 0.73  0.61  0.46  0.51  0.89  0.49  0.54  0.63  0.46  0.66  0.97  0.51 ]
[ 0.86  0.79  0.68  0.74  0.93  0.46  0.67  0.90  0.83  0.91  0.82  0.58 ]
[ 0.49  0.81  0.46  0.47  0.64  0.63  0.91  0.92  0.74  0.46  0.91  0.50 ]
[ 0.83  0.86  0.67  0.90  0.88  0.49  0.92  0.56  0.96  0.75  0.66  0.90 ]
[ 0.46  0.49  0.93  0.77  0.91  0.92  0.73  0.98  0.47  0.54  0.93  0.52 ]
[ 0.74  0.94  0.97  0.45  0.61  0.61  0.98  0.51  0.98  0.46  0.90  0.96 ]
[ 0.74  0.92  0.46  0.95  0.90  0.86  0.86  0.89  0.91  0.46  0.51  0.50 ]
[ 0.86  0.96  0.91  0.48  0.92  0.48  0.97  0.54  0.96  0.55  0.91  0.97 ]
[ 0.78  0.46  0.54  0.92  0.51  0.45  0.46  0.51  0.46  0.46  0.60  0.51 ]
[ 0.88  0.90  0.93  0.46  0.96  0.47  0.57  0.46  0.80  0.59  0.90  0.90 ]
[ 0.96  0.89  0.94  0.97  0.87  0.87  0.98  0.66  0.94  0.94  0.93  0.99 ]
[ 0.46  0.89  0.97  0.96  0.66  0.77  0.92  0.96  0.85  0.97  0.95  0.79 ]
[ 0.54  0.46  0.45  0.47  0.79  0.45  0.82  0.86  0.89  0.75  0.48  0.53 ]
[ 0.69  0.83  0.65  0.86  0.86  0.79  0.93  0.93  0.80  0.82  0.46  0.61 ]
[ 0.55  0.66  0.62  0.72  0.74  0.49  0.73  0.51  0.51  0.68  0.76  0.51 ]
[ 0.70  0.81  0.90  0.82  0.80  0.75  0.91  0.89  0.87  0.49  0.90  0.59 ]
[ 0.92  0.89  0.61  0.61  0.83  0.46  0.51  0.82  0.57  0.71  0.62  0.47 ]
[ 0.69  0.84  0.88  0.81  0.63  0.70  0.84  0.63  0.91  0.88  0.65  0.94 ]
[ 0.78  0.51  0.52  0.47  0.88  0.67  0.92  0.45  0.92  0.52  0.64  0.46 ]
[ 0.68  0.87  0.91  0.80  0.86  0.78  0.65  0.52  0.59  0.82  0.68  0.83 ]
[ 0.46  0.48  0.47  0.67  0.49  0.60  0.50  0.46  0.52  0.53  0.47  0.46 ]
[ 0.67  0.82  0.92  0.83  0.87  0.72  0.80  0.63  0.60  0.82  0.53  0.94 ]
[ 0.56  0.46  0.94  0.57  0.46  0.48  0.62  0.49  0.92  0.98  0.48  0.92 ]
[ 0.58  0.88  0.86  0.65  0.72  0.59  0.55  0.60  0.80  0.85  0.49  0.65 ]
[ 0.50  0.59  0.55  0.62  0.69  0.46  0.75  0.59  0.77  0.52  0.45  0.61 ]
[ 0.69  0.87  0.86  0.78  0.53  0.75  0.87  0.49  0.51  0.78  0.54  0.93 ]
[ 0.77  0.57  0.71  0.50  0.47  0.72  0.92  0.68  0.56  0.85  0.52  0.57 ]
[ 0.69  0.85  0.47  0.82  0.93  0.58  0.79  0.69  0.47  0.63  0.54  0.54 ]
[ 0.96  0.96  0.58  0.93  0.90  0.88  0.95  0.94  0.96  0.97  0.82  0.92 ]
[ 0.83  0.93  0.78  0.84  0.98  0.46  0.95  0.46  0.95  0.85  0.98  0.97 ]
[ 0.62  0.80  0.90  0.91  0.49  0.47  0.72  0.90  0.95  0.78  0.67  0.75 ]
[ 0.64  0.94  0.82  0.76  0.96  0.91  0.85  0.86  0.76  0.60  0.99  0.91 ]
[ 0.75  0.97  0.46  0.54  0.77  0.62  0.46  0.67  0.53  0.71  0.98  0.91 ]
[ 0.84  0.76  0.97  0.78  0.93  0.96  0.51  0.57  0.86  0.92  0.98  0.98 ]
[ 0.77  0.67  0.60  0.50  0.57  0.54  0.95  0.93  0.93  0.49  0.79  0.77 ]
[ 0.79  0.87  0.94  0.84  0.55  0.90  0.85  0.97  0.84  0.49  0.90  0.51 ]
[ 0.81  0.81  0.72  0.78  0.88  0.46  0.51  0.97  0.85  0.52  0.93  0.93 ]
[ 0.84  0.81  0.65  0.85  0.72  0.83  0.83  0.96  0.78  0.65  0.96  0.84 ]
[ 0.78  0.46  0.93  0.63  0.51  0.65  0.82  0.94  0.88  0.96  0.51  0.59 ]
[ 0.95  0.84  0.92  0.53  0.97  0.70  0.92  0.61  0.72  0.83  0.46  0.69 ]
[ 0.46  0.57  0.47  0.90  0.82  0.63  0.87  0.48  0.96  0.50  0.60  0.46 ]
[ 0.94  0.88  0.96  0.91  0.60  0.71  0.97  0.91  0.97  0.54  0.78  0.96 ]
[ 0.83  0.81  0.95  0.83  0.63  0.67  0.65  0.89  0.96  0.98  0.55  0.77 ]
[ 0.89  0.95  0.49  0.85  0.97  0.63  0.76  0.95  0.67  0.56  0.66  0.96 ]
[ 0.95  0.68  0.61  0.86  0.77  0.87  0.94  0.97  0.71  0.57  0.95  0.66 ]
[ 0.78  0.93  0.76  0.81  0.97  0.47  0.73  0.90  0.74  0.78  0.88  0.96 ]

01/29 09:42:54 PM | === Batch 5/8
01/29 09:42:54 PM | loss = 0.698 + 1.709 + 0.104 = 2.512
01/29 09:42:55 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.31  0.77  0.42  0.70  0.38  0.60  0.31  0.96  0.31  0.64  0.91  0.34 ]
[ 0.47  0.41  0.39  0.96  0.86  0.68  0.98  0.84  0.70  0.91  0.70  0.96 ]
[ 0.35  0.40  0.33  0.69  0.71  0.44  0.79  0.98  0.67  0.54  0.39  0.62 ]
[ 0.57  0.89  0.72  0.83  0.99  0.94  0.98  0.97  0.81  0.85  0.51  0.93 ]
[ 0.39  0.57  0.41  0.41  0.88  0.69  0.32  0.61  0.32  0.65  0.37  0.72 ]
[ 0.48  0.35  0.88  0.87  0.71  0.74  0.97  0.64  0.96  0.89  0.76  0.96 ]
[ 0.44  0.42  0.34  0.39  0.87  0.31  0.75  0.51  0.86  0.39  0.34  0.72 ]
[ 0.78  0.79  0.93  0.96  0.77  0.33  0.97  0.64  0.65  0.75  0.40  0.96 ]
[ 0.69  0.62  0.32  0.38  0.86  0.37  0.44  0.57  0.32  0.65  0.98  0.39 ]
[ 0.82  0.74  0.72  0.79  0.94  0.32  0.64  0.88  0.80  0.90  0.77  0.49 ]
[ 0.38  0.81  0.32  0.33  0.62  0.58  0.91  0.95  0.75  0.32  0.91  0.40 ]
[ 0.77  0.88  0.69  0.93  0.91  0.37  0.92  0.47  0.95  0.67  0.68  0.84 ]
[ 0.46  0.36  0.95  0.68  0.92  0.93  0.64  0.98  0.33  0.44  0.93  0.43 ]
[ 0.65  0.95  0.98  0.31  0.49  0.50  0.98  0.38  0.98  0.32  0.89  0.96 ]
[ 0.79  0.92  0.35  0.96  0.92  0.87  0.86  0.90  0.93  0.33  0.48  0.37 ]
[ 0.81  0.97  0.92  0.36  0.92  0.35  0.98  0.44  0.95  0.43  0.90  0.97 ]
[ 0.78  0.32  0.42  0.92  0.37  0.32  0.33  0.38  0.31  0.31  0.48  0.39 ]
[ 0.84  0.91  0.94  0.33  0.96  0.34  0.49  0.33  0.75  0.49  0.89  0.89 ]
[ 0.95  0.91  0.95  0.98  0.86  0.90  0.98  0.55  0.92  0.94  0.92  0.99 ]
[ 0.32  0.92  0.97  0.98  0.59  0.71  0.94  0.95  0.81  0.97  0.97  0.77 ]
[ 0.42  0.34  0.31  0.33  0.74  0.34  0.76  0.85  0.91  0.67  0.35  0.41 ]
[ 0.74  0.87  0.59  0.90  0.87  0.76  0.95  0.90  0.74  0.82  0.32  0.64 ]
[ 0.52  0.59  0.62  0.79  0.71  0.38  0.68  0.39  0.47  0.70  0.79  0.39 ]
[ 0.76  0.85  0.86  0.86  0.78  0.68  0.94  0.88  0.86  0.37  0.91  0.63 ]
[ 0.90  0.88  0.59  0.56  0.88  0.31  0.38  0.76  0.47  0.63  0.56  0.37 ]
[ 0.75  0.89  0.85  0.86  0.53  0.63  0.84  0.52  0.91  0.84  0.56  0.95 ]
[ 0.71  0.39  0.42  0.34  0.91  0.69  0.92  0.31  0.89  0.43  0.55  0.32 ]
[ 0.73  0.91  0.88  0.85  0.88  0.73  0.61  0.42  0.56  0.81  0.63  0.81 ]
[ 0.32  0.36  0.35  0.62  0.37  0.59  0.44  0.32  0.48  0.42  0.33  0.31 ]
[ 0.71  0.87  0.91  0.88  0.90  0.66  0.83  0.61  0.55  0.83  0.53  0.94 ]
[ 0.46  0.31  0.95  0.48  0.33  0.36  0.65  0.40  0.90  0.98  0.35  0.92 ]
[ 0.56  0.91  0.81  0.61  0.74  0.50  0.46  0.56  0.82  0.87  0.46  0.56 ]
[ 0.38  0.47  0.53  0.58  0.76  0.32  0.72  0.60  0.83  0.42  0.31  0.55 ]
[ 0.75  0.90  0.80  0.83  0.44  0.70  0.91  0.39  0.38  0.82  0.48  0.94 ]
[ 0.75  0.44  0.76  0.40  0.34  0.62  0.93  0.69  0.48  0.82  0.40  0.58 ]
[ 0.75  0.89  0.33  0.87  0.95  0.46  0.82  0.61  0.34  0.61  0.49  0.59 ]
[ 0.96  0.96  0.47  0.94  0.89  0.87  0.94  0.92  0.96  0.98  0.84  0.92 ]
[ 0.83  0.91  0.83  0.87  0.99  0.32  0.96  0.32  0.96  0.81  0.98  0.97 ]
[ 0.53  0.80  0.91  0.91  0.53  0.36  0.78  0.90  0.93  0.80  0.71  0.77 ]
[ 0.64  0.92  0.88  0.77  0.96  0.92  0.89  0.82  0.78  0.50  0.99  0.91 ]
[ 0.73  0.98  0.32  0.55  0.79  0.56  0.32  0.62  0.58  0.68  0.97  0.91 ]
[ 0.88  0.80  0.98  0.80  0.91  0.96  0.46  0.45  0.87  0.95  0.98  0.98 ]
[ 0.75  0.69  0.61  0.46  0.49  0.57  0.95  0.90  0.93  0.42  0.80  0.80 ]
[ 0.84  0.90  0.95  0.86  0.54  0.91  0.89  0.97  0.85  0.36  0.91  0.50 ]
[ 0.84  0.77  0.75  0.78  0.91  0.32  0.40  0.97  0.85  0.48  0.92  0.93 ]
[ 0.89  0.84  0.63  0.87  0.73  0.84  0.80  0.96  0.77  0.66  0.96  0.88 ]
[ 0.73  0.31  0.95  0.58  0.40  0.56  0.76  0.95  0.83  0.96  0.39  0.47 ]
[ 0.95  0.87  0.92  0.49  0.98  0.76  0.93  0.68  0.79  0.86  0.33  0.74 ]
[ 0.33  0.56  0.35  0.91  0.80  0.54  0.87  0.34  0.95  0.47  0.66  0.32 ]
[ 0.95  0.84  0.95  0.93  0.53  0.65  0.96  0.93  0.97  0.42  0.74  0.96 ]
[ 0.79  0.77  0.95  0.86  0.66  0.56  0.55  0.90  0.96  0.98  0.53  0.68 ]
[ 0.91  0.93  0.36  0.83  0.97  0.70  0.77  0.95  0.68  0.56  0.62  0.96 ]
[ 0.95  0.71  0.53  0.83  0.79  0.86  0.94  0.96  0.78  0.48  0.95  0.63 ]
[ 0.73  0.91  0.82  0.83  0.97  0.35  0.71  0.85  0.72  0.82  0.85  0.96 ]

01/29 09:42:55 PM | === Batch 6/8
01/29 09:42:56 PM | loss = 0.566 + 1.159 + 0.097 = 1.821
01/29 09:42:57 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.20  0.76  0.32  0.69  0.29  0.59  0.20  0.97  0.20  0.61  0.89  0.22 ]
[ 0.46  0.30  0.27  0.97  0.89  0.55  0.97  0.85  0.68  0.89  0.74  0.96 ]
[ 0.25  0.31  0.22  0.64  0.70  0.35  0.74  0.99  0.66  0.45  0.29  0.57 ]
[ 0.62  0.90  0.73  0.84  0.99  0.94  0.98  0.98  0.83  0.85  0.39  0.92 ]
[ 0.29  0.50  0.36  0.33  0.84  0.74  0.20  0.56  0.20  0.64  0.28  0.72 ]
[ 0.41  0.24  0.86  0.89  0.74  0.65  0.97  0.57  0.96  0.87  0.80  0.96 ]
[ 0.33  0.37  0.23  0.32  0.84  0.20  0.77  0.50  0.86  0.29  0.25  0.72 ]
[ 0.77  0.83  0.93  0.98  0.80  0.23  0.97  0.59  0.62  0.67  0.28  0.97 ]
[ 0.62  0.64  0.20  0.27  0.81  0.27  0.35  0.48  0.21  0.61  0.98  0.27 ]
[ 0.80  0.75  0.72  0.81  0.96  0.21  0.62  0.83  0.78  0.90  0.69  0.39 ]
[ 0.27  0.78  0.20  0.21  0.58  0.50  0.92  0.96  0.76  0.20  0.89  0.31 ]
[ 0.74  0.88  0.68  0.95  0.93  0.29  0.92  0.36  0.95  0.61  0.66  0.80 ]
[ 0.53  0.27  0.96  0.64  0.92  0.91  0.59  0.99  0.22  0.41  0.91  0.34 ]
[ 0.59  0.94  0.98  0.20  0.46  0.48  0.98  0.27  0.98  0.21  0.89  0.96 ]
[ 0.77  0.92  0.25  0.96  0.94  0.85  0.84  0.92  0.93  0.22  0.42  0.26 ]
[ 0.76  0.97  0.92  0.25  0.90  0.24  0.98  0.33  0.95  0.33  0.91  0.97 ]
[ 0.81  0.21  0.31  0.92  0.25  0.21  0.21  0.28  0.20  0.20  0.37  0.27 ]
[ 0.83  0.89  0.94  0.22  0.96  0.28  0.39  0.24  0.73  0.39  0.89  0.89 ]
[ 0.93  0.93  0.95  0.98  0.87  0.93  0.98  0.56  0.90  0.93  0.92  0.99 ]
[ 0.20  0.95  0.97  0.98  0.55  0.66  0.94  0.94  0.79  0.97  0.98  0.80 ]
[ 0.31  0.23  0.20  0.29  0.70  0.24  0.68  0.85  0.91  0.65  0.24  0.30 ]
[ 0.77  0.91  0.52  0.93  0.89  0.73  0.96  0.85  0.70  0.83  0.22  0.65 ]
[ 0.48  0.54  0.59  0.84  0.66  0.28  0.61  0.29  0.43  0.69  0.81  0.28 ]
[ 0.78  0.90  0.81  0.89  0.81  0.62  0.96  0.83  0.86  0.26  0.91  0.69 ]
[ 0.87  0.88  0.54  0.58  0.90  0.20  0.26  0.74  0.36  0.58  0.50  0.27 ]
[ 0.77  0.92  0.83  0.90  0.45  0.56  0.84  0.40  0.89  0.80  0.50  0.95 ]
[ 0.62  0.27  0.31  0.23  0.91  0.67  0.91  0.20  0.83  0.35  0.45  0.21 ]
[ 0.74  0.94  0.83  0.89  0.90  0.68  0.54  0.34  0.53  0.84  0.60  0.84 ]
[ 0.21  0.26  0.24  0.53  0.28  0.56  0.41  0.22  0.45  0.30  0.23  0.20 ]
[ 0.72  0.90  0.88  0.92  0.92  0.59  0.85  0.55  0.49  0.85  0.55  0.95 ]
[ 0.36  0.20  0.94  0.38  0.22  0.27  0.63  0.31  0.87  0.97  0.27  0.92 ]
[ 0.51  0.93  0.73  0.63  0.75  0.41  0.37  0.48  0.85  0.90  0.39  0.50 ]
[ 0.28  0.38  0.51  0.52  0.80  0.20  0.71  0.63  0.87  0.31  0.20  0.48 ]
[ 0.76  0.93  0.73  0.86  0.36  0.64  0.94  0.34  0.31  0.86  0.41  0.94 ]
[ 0.75  0.37  0.79  0.30  0.23  0.56  0.92  0.70  0.37  0.78  0.30  0.57 ]
[ 0.77  0.92  0.21  0.91  0.96  0.35  0.83  0.59  0.23  0.59  0.43  0.64 ]
[ 0.96  0.95  0.48  0.94  0.88  0.89  0.95  0.90  0.97  0.98  0.87  0.90 ]
[ 0.86  0.89  0.87  0.89  0.99  0.20  0.96  0.20  0.96  0.84  0.99  0.97 ]
[ 0.46  0.79  0.92  0.92  0.55  0.26  0.81  0.87  0.91  0.79  0.71  0.78 ]
[ 0.65  0.89  0.91  0.79  0.96  0.93  0.91  0.76  0.79  0.52  0.99  0.91 ]
[ 0.77  0.97  0.20  0.54  0.79  0.47  0.20  0.56  0.53  0.69  0.97  0.92 ]
[ 0.91  0.84  0.98  0.82  0.91  0.96  0.42  0.33  0.87  0.96  0.98  0.98 ]
[ 0.75  0.71  0.63  0.40  0.43  0.54  0.95  0.85  0.91  0.35  0.82  0.81 ]
[ 0.88  0.92  0.94  0.87  0.59  0.90  0.90  0.97  0.86  0.26  0.91  0.48 ]
[ 0.86  0.73  0.74  0.80  0.92  0.20  0.30  0.98  0.86  0.44  0.90  0.91 ]
[ 0.92  0.86  0.69  0.89  0.73  0.86  0.82  0.96  0.74  0.69  0.95  0.90 ]
[ 0.75  0.20  0.95  0.50  0.31  0.49  0.74  0.96  0.76  0.95  0.32  0.35 ]
[ 0.95  0.90  0.94  0.46  0.98  0.78  0.93  0.75  0.78  0.89  0.26  0.79 ]
[ 0.23  0.49  0.25  0.91  0.79  0.45  0.88  0.22  0.93  0.43  0.67  0.20 ]
[ 0.95  0.78  0.94  0.95  0.52  0.58  0.96  0.95  0.97  0.30  0.74  0.96 ]
[ 0.79  0.78  0.94  0.87  0.68  0.47  0.43  0.91  0.96  0.99  0.47  0.58 ]
[ 0.92  0.91  0.31  0.80  0.97  0.71  0.77  0.93  0.68  0.54  0.60  0.96 ]
[ 0.95  0.74  0.42  0.77  0.80  0.88  0.94  0.96  0.83  0.37  0.93  0.57 ]
[ 0.68  0.88  0.84  0.85  0.96  0.24  0.69  0.77  0.68  0.86  0.83  0.96 ]

01/29 09:42:57 PM | === Batch 7/8
01/29 09:42:58 PM | loss = 0.847 + 0.667 + 0.087 = 1.601
01/29 09:42:59 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.12  0.77  0.28  0.67  0.21  0.60  0.12  0.97  0.12  0.57  0.90  0.15 ]
[ 0.40  0.21  0.19  0.98  0.91  0.57  0.98  0.87  0.69  0.90  0.78  0.97 ]
[ 0.17  0.25  0.14  0.57  0.68  0.29  0.68  0.99  0.66  0.40  0.21  0.51 ]
[ 0.68  0.90  0.76  0.88  1.00  0.94  0.98  0.98  0.84  0.84  0.29  0.93 ]
[ 0.28  0.47  0.37  0.26  0.85  0.78  0.12  0.53  0.12  0.62  0.19  0.71 ]
[ 0.32  0.15  0.89  0.91  0.77  0.69  0.97  0.53  0.96  0.88  0.83  0.97 ]
[ 0.24  0.32  0.15  0.29  0.83  0.12  0.78  0.47  0.86  0.26  0.18  0.71 ]
[ 0.72  0.86  0.94  0.98  0.82  0.15  0.98  0.55  0.59  0.68  0.20  0.97 ]
[ 0.59  0.66  0.12  0.19  0.79  0.18  0.26  0.43  0.12  0.56  0.98  0.27 ]
[ 0.75  0.77  0.76  0.84  0.97  0.13  0.61  0.85  0.78  0.91  0.59  0.32 ]
[ 0.18  0.76  0.12  0.13  0.55  0.40  0.92  0.97  0.76  0.12  0.88  0.24 ]
[ 0.68  0.90  0.71  0.96  0.95  0.21  0.93  0.27  0.95  0.56  0.61  0.82 ]
[ 0.53  0.19  0.96  0.61  0.93  0.91  0.52  0.99  0.14  0.36  0.90  0.24 ]
[ 0.50  0.93  0.98  0.14  0.48  0.40  0.98  0.17  0.98  0.13  0.90  0.97 ]
[ 0.75  0.92  0.20  0.97  0.94  0.83  0.82  0.93  0.93  0.14  0.36  0.17 ]
[ 0.69  0.97  0.93  0.19  0.89  0.16  0.98  0.24  0.95  0.24  0.91  0.98 ]
[ 0.81  0.14  0.22  0.93  0.17  0.14  0.15  0.21  0.12  0.12  0.29  0.19 ]
[ 0.79  0.87  0.94  0.14  0.96  0.21  0.32  0.17  0.71  0.32  0.90  0.89 ]
[ 0.93  0.94  0.96  0.98  0.90  0.94  0.98  0.57  0.91  0.94  0.94  0.99 ]
[ 0.12  0.96  0.97  0.99  0.52  0.61  0.95  0.95  0.75  0.97  0.98  0.84 ]
[ 0.23  0.15  0.12  0.28  0.63  0.17  0.66  0.85  0.91  0.69  0.19  0.23 ]
[ 0.80  0.93  0.50  0.94  0.90  0.67  0.97  0.86  0.63  0.82  0.14  0.68 ]
[ 0.42  0.48  0.54  0.88  0.62  0.22  0.52  0.21  0.38  0.68  0.81  0.20 ]
[ 0.81  0.92  0.81  0.91  0.84  0.52  0.97  0.85  0.84  0.19  0.91  0.71 ]
[ 0.86  0.90  0.47  0.64  0.90  0.12  0.23  0.75  0.26  0.54  0.45  0.18 ]
[ 0.78  0.94  0.86  0.92  0.45  0.47  0.87  0.30  0.88  0.74  0.41  0.95 ]
[ 0.57  0.19  0.22  0.15  0.91  0.64  0.92  0.12  0.77  0.28  0.36  0.13 ]
[ 0.75  0.95  0.81  0.90  0.91  0.61  0.52  0.27  0.55  0.84  0.53  0.88 ]
[ 0.15  0.18  0.16  0.44  0.20  0.52  0.37  0.15  0.40  0.21  0.15  0.12 ]
[ 0.72  0.93  0.87  0.94  0.94  0.50  0.88  0.54  0.43  0.85  0.50  0.95 ]
[ 0.26  0.12  0.95  0.29  0.14  0.21  0.59  0.25  0.83  0.97  0.20  0.92 ]
[ 0.48  0.94  0.70  0.66  0.78  0.31  0.28  0.43  0.85  0.91  0.30  0.42 ]
[ 0.19  0.27  0.48  0.48  0.83  0.12  0.67  0.62  0.90  0.25  0.12  0.38 ]
[ 0.76  0.94  0.72  0.88  0.32  0.56  0.95  0.27  0.24  0.88  0.32  0.94 ]
[ 0.75  0.28  0.77  0.21  0.15  0.47  0.91  0.70  0.27  0.73  0.22  0.61 ]
[ 0.79  0.93  0.14  0.93  0.97  0.25  0.84  0.51  0.16  0.60  0.37  0.62 ]
[ 0.97  0.96  0.54  0.95  0.87  0.90  0.95  0.88  0.96  0.98  0.89  0.87 ]
[ 0.86  0.89  0.90  0.90  0.99  0.12  0.95  0.12  0.96  0.88  0.99  0.96 ]
[ 0.38  0.81  0.93  0.92  0.56  0.18  0.81  0.82  0.90  0.73  0.70  0.81 ]
[ 0.69  0.89  0.93  0.79  0.94  0.93  0.90  0.72  0.78  0.51  0.99  0.91 ]
[ 0.78  0.97  0.12  0.52  0.77  0.37  0.12  0.52  0.47  0.68  0.98  0.93 ]
[ 0.93  0.86  0.99  0.82  0.91  0.95  0.39  0.27  0.88  0.97  0.99  0.99 ]
[ 0.73  0.69  0.61  0.32  0.35  0.52  0.95  0.78  0.91  0.27  0.83  0.78 ]
[ 0.92  0.93  0.93  0.87  0.59  0.88  0.89  0.97  0.86  0.18  0.91  0.44 ]
[ 0.87  0.71  0.71  0.81  0.93  0.12  0.21  0.98  0.84  0.39  0.90  0.89 ]
[ 0.94  0.87  0.75  0.91  0.74  0.90  0.87  0.96  0.67  0.70  0.95  0.92 ]
[ 0.76  0.12  0.96  0.39  0.24  0.44  0.74  0.96  0.74  0.95  0.29  0.24 ]
[ 0.94  0.92  0.96  0.48  0.98  0.79  0.94  0.81  0.77  0.91  0.21  0.82 ]
[ 0.15  0.43  0.16  0.89  0.76  0.39  0.89  0.15  0.90  0.38  0.66  0.12 ]
[ 0.96  0.71  0.95  0.97  0.59  0.53  0.96  0.95  0.97  0.21  0.73  0.97 ]
[ 0.80  0.80  0.94  0.88  0.68  0.40  0.35  0.91  0.96  0.99  0.39  0.56 ]
[ 0.94  0.92  0.27  0.80  0.96  0.68  0.76  0.91  0.68  0.52  0.53  0.97 ]
[ 0.94  0.76  0.31  0.77  0.81  0.90  0.93  0.95  0.87  0.31  0.91  0.48 ]
[ 0.61  0.86  0.83  0.83  0.96  0.15  0.63  0.74  0.65  0.90  0.80  0.95 ]

01/29 09:42:59 PM | === Batch 8/8
01/29 09:42:59 PM | loss = 0.938 + 0.290 + 0.080 = 1.308
01/29 09:43:01 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.07  0.79  0.24  0.65  0.15  0.59  0.07  0.97  0.07  0.50  0.92  0.10 ]
[ 0.32  0.15  0.12  0.99  0.93  0.65  0.98  0.88  0.66  0.93  0.83  0.97 ]
[ 0.13  0.27  0.09  0.48  0.66  0.30  0.61  0.99  0.66  0.37  0.16  0.49 ]
[ 0.75  0.89  0.81  0.91  1.00  0.96  0.98  0.98  0.84  0.80  0.26  0.94 ]
[ 0.30  0.47  0.43  0.22  0.87  0.83  0.07  0.49  0.07  0.56  0.13  0.69 ]
[ 0.24  0.10  0.92  0.94  0.79  0.75  0.97  0.52  0.97  0.90  0.84  0.97 ]
[ 0.15  0.32  0.11  0.29  0.86  0.08  0.77  0.46  0.86  0.27  0.15  0.70 ]
[ 0.63  0.87  0.95  0.99  0.83  0.10  0.98  0.54  0.53  0.72  0.13  0.98 ]
[ 0.57  0.68  0.07  0.21  0.83  0.13  0.18  0.42  0.07  0.48  0.98  0.28 ]
[ 0.67  0.77  0.81  0.88  0.98  0.08  0.62  0.88  0.80  0.93  0.47  0.27 ]
[ 0.11  0.77  0.07  0.08  0.50  0.30  0.92  0.98  0.75  0.07  0.89  0.19 ]
[ 0.58  0.92  0.77  0.98  0.96  0.15  0.93  0.21  0.96  0.55  0.54  0.85 ]
[ 0.49  0.12  0.97  0.56  0.93  0.92  0.43  0.99  0.09  0.31  0.91  0.19 ]
[ 0.39  0.94  0.99  0.11  0.50  0.31  0.98  0.11  0.98  0.08  0.91  0.97 ]
[ 0.72  0.91  0.14  0.97  0.94  0.85  0.84  0.93  0.94  0.09  0.32  0.12 ]
[ 0.59  0.98  0.95  0.15  0.87  0.11  0.99  0.19  0.95  0.18  0.92  0.98 ]
[ 0.78  0.10  0.16  0.92  0.13  0.09  0.11  0.16  0.07  0.07  0.21  0.13 ]
[ 0.72  0.88  0.95  0.09  0.96  0.15  0.28  0.11  0.73  0.27  0.90  0.89 ]
[ 0.94  0.95  0.97  0.99  0.93  0.94  0.99  0.61  0.92  0.95  0.96  1.00 ]
[ 0.07  0.97  0.97  0.99  0.52  0.60  0.96  0.97  0.68  0.98  0.99  0.89 ]
[ 0.17  0.09  0.07  0.32  0.56  0.11  0.68  0.88  0.90  0.74  0.16  0.20 ]
[ 0.81  0.93  0.51  0.95  0.92  0.61  0.98  0.89  0.53  0.77  0.09  0.69 ]
[ 0.43  0.46  0.46  0.92  0.65  0.16  0.42  0.16  0.36  0.63  0.78  0.16 ]
[ 0.81  0.93  0.84  0.92  0.88  0.45  0.98  0.89  0.80  0.15  0.91  0.73 ]
[ 0.86  0.92  0.39  0.68  0.88  0.07  0.22  0.79  0.18  0.53  0.40  0.11 ]
[ 0.78  0.95  0.88  0.93  0.50  0.39  0.90  0.20  0.90  0.70  0.31  0.94 ]
[ 0.59  0.13  0.14  0.11  0.92  0.58  0.93  0.07  0.70  0.24  0.28  0.08 ]
[ 0.72  0.96  0.84  0.89  0.93  0.54  0.58  0.21  0.61  0.81  0.43  0.89 ]
[ 0.11  0.12  0.11  0.39  0.14  0.44  0.33  0.11  0.35  0.14  0.10  0.07 ]
[ 0.68  0.93  0.89  0.94  0.95  0.42  0.92  0.57  0.37  0.81  0.41  0.94 ]
[ 0.18  0.07  0.95  0.24  0.09  0.18  0.52  0.22  0.77  0.98  0.15  0.93 ]
[ 0.43  0.95  0.70  0.73  0.82  0.24  0.19  0.36  0.85  0.90  0.21  0.38 ]
[ 0.13  0.19  0.40  0.52  0.88  0.07  0.62  0.56  0.93  0.19  0.07  0.29 ]
[ 0.74  0.94  0.76  0.88  0.28  0.48  0.97  0.20  0.17  0.88  0.24  0.95 ]
[ 0.73  0.21  0.72  0.14  0.09  0.39  0.87  0.67  0.18  0.64  0.16  0.68 ]
[ 0.78  0.93  0.09  0.95  0.98  0.17  0.87  0.42  0.11  0.65  0.29  0.61 ]
[ 0.97  0.97  0.62  0.95  0.87  0.92  0.95  0.86  0.96  0.98  0.89  0.83 ]
[ 0.84  0.91  0.92  0.91  0.99  0.07  0.93  0.07  0.97  0.92  0.99  0.95 ]
[ 0.29  0.80  0.94  0.91  0.58  0.13  0.76  0.74  0.88  0.65  0.67  0.82 ]
[ 0.69  0.90  0.94  0.78  0.95  0.91  0.88  0.72  0.79  0.55  1.00  0.90 ]
[ 0.77  0.97  0.07  0.48  0.73  0.31  0.07  0.51  0.39  0.71  0.98  0.94 ]
[ 0.93  0.87  0.99  0.80  0.90  0.94  0.39  0.26  0.87  0.98  0.99  0.99 ]
[ 0.74  0.63  0.54  0.25  0.28  0.50  0.95  0.68  0.91  0.20  0.83  0.73 ]
[ 0.93  0.94  0.90  0.85  0.54  0.84  0.88  0.97  0.87  0.13  0.89  0.48 ]
[ 0.87  0.67  0.67  0.83  0.95  0.07  0.15  0.97  0.80  0.37  0.90  0.86 ]
[ 0.94  0.87  0.81  0.92  0.78  0.93  0.90  0.97  0.58  0.72  0.95  0.93 ]
[ 0.75  0.07  0.96  0.30  0.19  0.41  0.76  0.97  0.68  0.96  0.31  0.17 ]
[ 0.94  0.92  0.97  0.51  0.98  0.79  0.96  0.84  0.73  0.92  0.18  0.86 ]
[ 0.10  0.38  0.10  0.86  0.71  0.34  0.91  0.11  0.84  0.30  0.59  0.07 ]
[ 0.96  0.70  0.97  0.97  0.66  0.60  0.97  0.95  0.97  0.16  0.70  0.96 ]
[ 0.83  0.82  0.95  0.89  0.62  0.38  0.31  0.92  0.95  0.99  0.34  0.51 ]
[ 0.96  0.93  0.25  0.80  0.97  0.71  0.75  0.90  0.67  0.46  0.46  0.96 ]
[ 0.93  0.77  0.23  0.79  0.81  0.89  0.91  0.95  0.90  0.25  0.88  0.39 ]
[ 0.50  0.85  0.81  0.79  0.97  0.09  0.53  0.76  0.66  0.91  0.78  0.94 ]

01/29 09:43:01 PM | ===
Best loss was 1.31 at iteration 8

01/29 09:43:01 PM | Looking for optimal threshold...
01/29 09:43:01 PM | Testing threshold 0.5
01/29 09:43:01 PM | Distance to target: 5,245,120
01/29 09:43:01 PM | Testing threshold 0.75
01/29 09:43:01 PM | Distance to target: 19,545,664
01/29 09:43:01 PM | Testing threshold 0.625
01/29 09:43:01 PM | Distance to target: 6,172,608
01/29 09:43:01 PM | Testing threshold 0.5625
01/29 09:43:01 PM | Distance to target: 725,952
01/29 09:43:01 PM | Testing threshold 0.53125
01/29 09:43:01 PM | Distance to target: 2,247,616
01/29 09:43:01 PM | Testing threshold 0.546875
01/29 09:43:01 PM | Distance to target: 784,384
01/29 09:43:01 PM | Testing threshold 0.5546875
01/29 09:43:01 PM | Distance to target: 9,216
01/29 09:43:03 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00  0.00 ]
[ 0.00  0.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  1.00  1.00  0.00  1.00  1.00  1.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00 ]
[ 0.00  0.00  0.00  0.00  1.00  1.00  0.00  0.00  0.00  1.00  0.00  1.00 ]
[ 0.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00  0.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  0.00  1.00 ]
[ 1.00  1.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  1.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00 ]
[ 0.00  1.00  0.00  0.00  0.00  0.00  1.00  1.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  0.00 ]
[ 0.00  1.00  1.00  0.00  0.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  0.00  1.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 0.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00  0.00  0.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00 ]
[ 0.00  0.00  0.00  1.00  1.00  0.00  0.00  0.00  0.00  1.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  0.00  0.00  1.00  0.00  1.00  1.00  0.00  1.00 ]
[ 1.00  0.00  0.00  0.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  0.00  1.00  0.00  1.00 ]
[ 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  0.00  1.00 ]
[ 0.00  0.00  1.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00  0.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  0.00  0.00  0.00  1.00  1.00  0.00  0.00 ]
[ 0.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00  1.00  0.00  0.00  0.00 ]
[ 1.00  1.00  1.00  1.00  0.00  1.00  1.00  0.00  0.00  1.00  0.00  1.00 ]
[ 1.00  0.00  1.00  0.00  0.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  0.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  0.00  0.00  0.00  1.00  1.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  0.00  1.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  0.00  1.00  0.00  0.00  0.00  1.00  1.00  1.00  1.00  0.00  0.00 ]
[ 1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00 ]
[ 0.00  0.00  0.00  1.00  1.00  0.00  1.00  0.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  0.00  1.00  1.00  1.00  0.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  0.00  1.00 ]
[ 1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00 ]
[ 1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00 ]

01/29 09:43:04 PM | ResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(8, 11, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(11, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (1): BasicBlock(
      (conv1): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(8, 15, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(15, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(16, 5, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(5, 13, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(13, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(4, 13, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(13, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(16, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(6, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(16, 5, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(5, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(5, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(16, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(16, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(3, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(10, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(16, 31, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(31, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(29, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(32, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(9, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(9, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(32, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(12, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(32, 14, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(14, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(14, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(32, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(12, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(32, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(6, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(32, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(12, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(32, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(6, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(32, 13, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(13, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(13, 21, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(21, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(32, 59, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(59, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(59, 59, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(59, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): LambdaLayer()
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 41, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(41, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(41, 57, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(57, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (2): BasicBlock(
      (conv1): Conv2d(64, 38, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(38, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(38, 55, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(55, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (3): BasicBlock(
      (conv1): Conv2d(64, 39, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(39, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(39, 49, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(49, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (4): BasicBlock(
      (conv1): Conv2d(64, 44, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(44, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(44, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (5): BasicBlock(
      (conv1): Conv2d(64, 43, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(43, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(43, 52, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(52, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (6): BasicBlock(
      (conv1): Conv2d(64, 38, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(38, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(38, 56, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (7): BasicBlock(
      (conv1): Conv2d(64, 53, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(53, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(53, 50, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
    (8): BasicBlock(
      (conv1): Conv2d(64, 51, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU(inplace=True)
      (conv2): Conv2d(51, 44, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(44, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU(inplace=True)
      (shortcut): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (linear): Linear(in_features=64, out_features=10, bias=True)
)
01/29 09:43:08 PM | ----------------------------------------
01/29 09:43:08 PM | Performances input model:
01/29 09:43:08 PM |  - flops: 126,554,816
01/29 09:43:08 PM |  - params: 853,018
01/29 09:43:08 PM |  - accuracy: 93.2699966430664
01/29 09:43:08 PM | ----------------------------------------
01/29 09:43:08 PM | Performances pseudo-pruned model:
01/29 09:43:08 PM |  - flops: 126,554,816
01/29 09:43:08 PM |  - params: 853,018
01/29 09:43:08 PM |  - accuracy: 55.439998626708984
01/29 09:43:08 PM | ----------------------------------------
01/29 09:43:08 PM | Performances pruned model:
01/29 09:43:08 PM |  - flops: 55,849,216
01/29 09:43:08 PM |  - params: 482,895
01/29 09:43:08 PM |  - accuracy: 55.439998626708984
01/29 09:43:08 PM | ----------------------------------------
01/29 09:43:08 PM | Total time: 29.59s
