01/29 09:36:43 PM | args = Namespace(output_dir='result/rebuttal/nb_epoch/vgg/nbbtchs4/seed_00', loaded_model_path='./checkpoints/cifar10/vgg_16_bn.pt', resume=False, test_only=False, mode='prune', batch_size=64, nb_batches=4, Mflops_target=None, lr=0.6, momentum=0.9, beta=6, gamma=0.4, gpu='0', num_workers=4, dataset='cifar10', arch='vgg_16_bn', save_plot=False, seed=0, lr_finetuning=0.02, epoch_finetuning=200, wd=0.002, data_dir='./data/cifar10/', print_freq=200, num_classes=10, device_ids=[0], device=device(type='cuda', index=0), name_base='')
01/29 09:36:49 PM | ----------------------------------------
01/29 09:36:49 PM | ==> Building model...
01/29 09:36:49 PM | ----------------------------------------
01/29 09:36:49 PM | ==> Loading weights into the model...
01/29 09:36:49 PM | ----------------------------------------
01/29 09:36:49 PM | VGG(
  (features): Sequential(
    (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU(inplace=True)
    (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu3): ReLU(inplace=True)
    (conv4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu4): ReLU(inplace=True)
    (pool5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv6): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu6): ReLU(inplace=True)
    (conv7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu7): ReLU(inplace=True)
    (conv8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm8): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu8): ReLU(inplace=True)
    (pool9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv10): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm10): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu10): ReLU(inplace=True)
    (conv11): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm11): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu11): ReLU(inplace=True)
    (conv12): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm12): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu12): ReLU(inplace=True)
    (pool13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv14): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm14): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu14): ReLU(inplace=True)
    (conv15): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm15): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu15): ReLU(inplace=True)
    (conv16): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu16): ReLU(inplace=True)
  )
  (classifier): Sequential(
    (linear1): Linear(in_features=512, out_features=512, bias=True)
    (norm1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU(inplace=True)
    (linear2): Linear(in_features=512, out_features=10, bias=True)
  )
)
01/29 09:36:55 PM | Save modules info...
01/29 09:36:55 PM | FLOPS pruning ratio is 0.65
01/29 09:36:55 PM | Pruning with information flow
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: None
01/29 09:36:55 PM | cout: [0]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [0]
01/29 09:36:55 PM | cout: [0]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [0]
01/29 09:36:55 PM | cout: [0]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [0]
01/29 09:36:55 PM | cout: [1]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [1]
01/29 09:36:55 PM | cout: [1]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [1]
01/29 09:36:55 PM | cout: [1]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
01/29 09:36:55 PM | cin: [1]
01/29 09:36:55 PM | cout: [1]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [1]
01/29 09:36:55 PM | cout: [2]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [2]
01/29 09:36:55 PM | cout: [2]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [2]
01/29 09:36:55 PM | cout: [2]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [2]
01/29 09:36:55 PM | cout: [3]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [3]
01/29 09:36:55 PM | cout: [3]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [3]
01/29 09:36:55 PM | cout: [3]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
01/29 09:36:55 PM | cin: [3]
01/29 09:36:55 PM | cout: [3]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [3]
01/29 09:36:55 PM | cout: [4]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [4]
01/29 09:36:55 PM | cout: [4]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [4]
01/29 09:36:55 PM | cout: [4]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [4]
01/29 09:36:55 PM | cout: [5]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [5]
01/29 09:36:55 PM | cout: [5]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [5]
01/29 09:36:55 PM | cout: [5]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [5]
01/29 09:36:55 PM | cout: [6]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [6]
01/29 09:36:55 PM | cout: [6]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [6]
01/29 09:36:55 PM | cout: [6]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
01/29 09:36:55 PM | cin: [6]
01/29 09:36:55 PM | cout: [6]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [6]
01/29 09:36:55 PM | cout: [7]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [7]
01/29 09:36:55 PM | cout: [7]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [7]
01/29 09:36:55 PM | cout: [7]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [7]
01/29 09:36:55 PM | cout: [8]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [8]
01/29 09:36:55 PM | cout: [8]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [8]
01/29 09:36:55 PM | cout: [8]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [8]
01/29 09:36:55 PM | cout: [9]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [9]
01/29 09:36:55 PM | cout: [9]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [9]
01/29 09:36:55 PM | cout: [9]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
01/29 09:36:55 PM | cin: [9]
01/29 09:36:55 PM | cout: [9]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [9]
01/29 09:36:55 PM | cout: [10]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [10]
01/29 09:36:55 PM | cout: [10]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [10]
01/29 09:36:55 PM | cout: [10]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [10]
01/29 09:36:55 PM | cout: [11]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [11]
01/29 09:36:55 PM | cout: [11]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [11]
01/29 09:36:55 PM | cout: [11]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 09:36:55 PM | cin: [11]
01/29 09:36:55 PM | cout: [12]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 09:36:55 PM | cin: [12]
01/29 09:36:55 PM | cout: [12]
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: [12]
01/29 09:36:55 PM | cout: [12]
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Linear(in_features=512, out_features=512, bias=True)
01/29 09:36:55 PM | cin: [12]
01/29 09:36:55 PM | cout: None
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: ReLU(inplace=True)
01/29 09:36:55 PM | cin: None
01/29 09:36:55 PM | cout: None
01/29 09:36:55 PM | active
01/29 09:36:55 PM | -----
01/29 09:36:55 PM | module: Linear(in_features=512, out_features=10, bias=True)
01/29 09:36:55 PM | cin: None
01/29 09:36:55 PM | cout: None
01/29 09:36:55 PM | inactive
01/29 09:36:55 PM | Used masks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
01/29 09:36:55 PM | 13 unique masks in total
01/29 09:36:56 PM | === Batch 1/4
01/29 09:36:56 PM | loss = 0.047 + 4.266 + 0.040 = 4.353
01/29 09:36:56 PM | attribution_score[0:12]: 
[ 0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.94  0.94  0.94  0.94  0.94  0.94  0.83  0.83  0.94  0.94  0.94  0.83 ]

01/29 09:36:56 PM | === Batch 2/4
01/29 09:36:57 PM | loss = 0.345 + 3.308 + 0.062 = 3.715
01/29 09:36:57 PM | attribution_score[0:12]: 
[ 0.96  0.88  0.77  0.73  0.75  0.73  0.73  0.73  0.73  0.73  0.73  0.81 ]
[ 0.87  0.76  0.75  0.74  0.87  0.73  0.74  0.73  0.73  0.86  0.88  0.74 ]
[ 0.96  0.88  0.74  0.88  0.73  0.88  0.86  0.77  0.74  0.74  0.73  0.96 ]
[ 0.73  0.83  0.96  0.74  0.76  0.73  0.85  0.87  0.81  0.85  0.73  0.88 ]
[ 0.83  0.76  0.96  0.74  0.75  0.73  0.73  0.75  0.74  0.74  0.86  0.85 ]
[ 0.73  0.75  0.77  0.74  0.73  0.80  0.74  0.74  0.73  0.74  0.73  0.86 ]
[ 0.74  0.73  0.94  0.74  0.74  0.75  0.74  0.73  0.76  0.74  0.86  0.75 ]
[ 0.73  0.73  0.73  0.73  0.74  0.73  0.73  0.73  0.74  0.73  0.73  0.82 ]
[ 0.75  0.73  0.73  0.73  0.74  0.73  0.73  0.73  0.74  0.73  0.80  0.73 ]
[ 0.73  0.73  0.73  0.73  0.85  0.74  0.73  0.73  0.74  0.73  0.75  0.73 ]
[ 0.73  0.75  0.85  0.74  0.73  0.86  0.73  0.75  0.81  0.73  0.96  0.74 ]
[ 0.88  0.97  0.76  0.87  0.88  0.86  0.74  0.97  0.84  0.88  0.87  0.74 ]
[ 0.97  0.96  0.97  0.91  0.97  0.96  0.88  0.88  0.96  0.97  0.97  0.73 ]

01/29 09:36:57 PM | === Batch 3/4
01/29 09:36:57 PM | loss = 0.339 + 2.497 + 0.081 = 2.918
01/29 09:36:57 PM | attribution_score[0:12]: 
[ 0.98  0.90  0.68  0.60  0.64  0.61  0.60  0.60  0.60  0.60  0.61  0.86 ]
[ 0.89  0.66  0.78  0.61  0.90  0.67  0.63  0.61  0.69  0.90  0.91  0.62 ]
[ 0.97  0.91  0.62  0.92  0.60  0.92  0.86  0.68  0.62  0.62  0.60  0.98 ]
[ 0.61  0.84  0.97  0.70  0.66  0.76  0.80  0.90  0.81  0.82  0.68  0.91 ]
[ 0.78  0.66  0.97  0.63  0.79  0.60  0.60  0.64  0.75  0.61  0.85  0.85 ]
[ 0.62  0.65  0.68  0.61  0.60  0.74  0.61  0.62  0.62  0.62  0.60  0.85 ]
[ 0.64  0.61  0.94  0.64  0.64  0.64  0.61  0.69  0.66  0.78  0.90  0.63 ]
[ 0.60  0.60  0.61  0.60  0.61  0.60  0.60  0.60  0.70  0.61  0.60  0.80 ]
[ 0.65  0.67  0.60  0.60  0.62  0.60  0.60  0.60  0.66  0.60  0.80  0.68 ]
[ 0.64  0.61  0.60  0.60  0.87  0.67  0.60  0.60  0.72  0.60  0.63  0.63 ]
[ 0.61  0.79  0.89  0.61  0.61  0.90  0.79  0.76  0.86  0.71  0.98  0.75 ]
[ 0.91  0.98  0.78  0.91  0.93  0.89  0.79  0.98  0.81  0.92  0.91  0.80 ]
[ 0.98  0.98  0.98  0.90  0.98  0.98  0.92  0.93  0.98  0.98  0.98  0.60 ]

01/29 09:36:57 PM | === Batch 4/4
01/29 09:36:57 PM | loss = 0.558 + 1.677 + 0.101 = 2.336
01/29 09:36:58 PM | attribution_score[0:12]: 
[ 0.98  0.92  0.57  0.46  0.50  0.47  0.46  0.45  0.45  0.46  0.46  0.84 ]
[ 0.90  0.56  0.83  0.47  0.90  0.58  0.61  0.46  0.72  0.92  0.91  0.48 ]
[ 0.98  0.94  0.48  0.94  0.45  0.94  0.87  0.64  0.48  0.49  0.48  0.98 ]
[ 0.47  0.85  0.96  0.73  0.57  0.82  0.74  0.92  0.78  0.80  0.64  0.92 ]
[ 0.71  0.53  0.98  0.53  0.85  0.47  0.45  0.51  0.80  0.56  0.82  0.80 ]
[ 0.61  0.64  0.55  0.46  0.47  0.64  0.50  0.50  0.50  0.49  0.45  0.82 ]
[ 0.53  0.47  0.93  0.53  0.52  0.52  0.57  0.73  0.71  0.84  0.94  0.50 ]
[ 0.45  0.46  0.46  0.45  0.50  0.45  0.57  0.45  0.73  0.47  0.48  0.73 ]
[ 0.55  0.71  0.45  0.61  0.50  0.45  0.47  0.47  0.65  0.45  0.83  0.74 ]
[ 0.62  0.47  0.45  0.45  0.84  0.65  0.46  0.45  0.77  0.45  0.52  0.56 ]
[ 0.47  0.85  0.93  0.60  0.64  0.92  0.85  0.79  0.90  0.77  0.99  0.81 ]
[ 0.91  0.99  0.84  0.95  0.95  0.90  0.85  0.99  0.74  0.94  0.94  0.86 ]
[ 0.99  0.99  0.99  0.92  0.99  0.99  0.95  0.96  0.98  0.99  0.99  0.56 ]

01/29 09:36:58 PM | ===
Best loss was 2.34 at iteration 4

01/29 09:36:58 PM | Looking for optimal threshold...
01/29 09:36:58 PM | Testing threshold 0.5
01/29 09:36:58 PM | Distance to target: 205,684,272
01/29 09:36:58 PM | Testing threshold 0.75
01/29 09:36:58 PM | Distance to target: 53,642,548
01/29 09:36:58 PM | Testing threshold 0.625
01/29 09:36:58 PM | Distance to target: 20,970,312
01/29 09:36:58 PM | Testing threshold 0.6875
01/29 09:36:58 PM | Distance to target: 32,269,176
01/29 09:36:58 PM | Testing threshold 0.65625
01/29 09:36:58 PM | Distance to target: 14,932,728
01/29 09:36:58 PM | Testing threshold 0.640625
01/29 09:36:58 PM | Distance to target: 3,153,544
01/29 09:36:58 PM | Testing threshold 0.6328125
01/29 09:36:58 PM | Distance to target: 8,780,832
01/29 09:36:58 PM | Testing threshold 0.63671875
01/29 09:36:58 PM | Distance to target: 2,986,248
01/29 09:36:58 PM | Testing threshold 0.638671875
01/29 09:36:58 PM | Distance to target: 1,201,208
01/29 09:36:58 PM | Testing threshold 0.6376953125
01/29 09:36:58 PM | Distance to target: 793,816
01/29 09:36:58 PM | Testing threshold 0.63818359375
01/29 09:36:58 PM | Distance to target: 453,592
01/29 09:36:58 PM | Testing threshold 0.637939453125
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6380615234375
01/29 09:36:58 PM | Distance to target: 177,544
01/29 09:36:58 PM | Testing threshold 0.63800048828125
01/29 09:36:58 PM | Distance to target: 177,544
01/29 09:36:58 PM | Testing threshold 0.637969970703125
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379852294921875
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379928588867188
01/29 09:36:58 PM | Distance to target: 177,544
01/29 09:36:58 PM | Testing threshold 0.6379890441894531
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379909515380859
01/29 09:36:58 PM | Distance to target: 177,544
01/29 09:36:58 PM | Testing threshold 0.6379899978637695
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379904747009277
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131195068
01/29 09:36:58 PM | Distance to target: 177,544
01/29 09:36:58 PM | Testing threshold 0.6379905939102173
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379906535148621
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379906833171844
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379906982183456
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907056689262
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907093942165
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907112568617
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907121881843
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907126538455
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907128866762
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907130030915
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907130612992
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.637990713090403
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131049549
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131122309
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131158689
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131176878
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131185973
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131190521
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131192795
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131193931
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.63799071311945
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131194784
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131194926
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131194997
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131195033
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.6379907131195051
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:36:58 PM | Testing threshold 0.637990713119506
01/29 09:36:58 PM | Distance to target: 128,824
01/29 09:37:00 PM | attribution_score[0:12]: 
[ 1.00  1.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00 ]
[ 1.00  1.00  1.00  0.00  1.00  1.00  0.00  0.00  1.00  1.00  1.00  0.00 ]
[ 1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  0.00  0.00  0.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  0.00  1.00  0.00  0.00  1.00  1.00  0.00  1.00  1.00 ]
[ 0.00  1.00  1.00  0.00  0.00  1.00  0.00  0.00  0.00  0.00  0.00  1.00 ]
[ 1.00  0.00  1.00  1.00  0.00  0.00  0.00  1.00  1.00  1.00  1.00  0.00 ]
[ 0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  1.00 ]
[ 1.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  0.00  0.00  0.00  1.00  1.00  0.00  0.00  1.00  0.00  0.00  0.00 ]
[ 0.00  1.00  1.00  0.00  0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00 ]

01/29 09:37:00 PM | VGG(
  (features): Sequential(
    (conv0): Conv2d(3, 23, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm0): BatchNorm2d(23, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (conv1): Conv2d(23, 51, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm1): BatchNorm2d(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU(inplace=True)
    (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv3): Conv2d(51, 92, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm3): BatchNorm2d(92, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu3): ReLU(inplace=True)
    (conv4): Conv2d(92, 103, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm4): BatchNorm2d(103, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu4): ReLU(inplace=True)
    (pool5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv6): Conv2d(103, 163, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm6): BatchNorm2d(163, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu6): ReLU(inplace=True)
    (conv7): Conv2d(163, 133, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm7): BatchNorm2d(133, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu7): ReLU(inplace=True)
    (conv8): Conv2d(133, 158, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm8): BatchNorm2d(158, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu8): ReLU(inplace=True)
    (pool9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv10): Conv2d(158, 186, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm10): BatchNorm2d(186, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu10): ReLU(inplace=True)
    (conv11): Conv2d(186, 100, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm11): BatchNorm2d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu11): ReLU(inplace=True)
    (conv12): Conv2d(100, 217, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm12): BatchNorm2d(217, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu12): ReLU(inplace=True)
    (pool13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv14): Conv2d(217, 411, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm14): BatchNorm2d(411, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu14): ReLU(inplace=True)
    (conv15): Conv2d(411, 491, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm15): BatchNorm2d(491, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu15): ReLU(inplace=True)
    (conv16): Conv2d(491, 509, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm16): BatchNorm2d(509, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu16): ReLU(inplace=True)
  )
  (classifier): Sequential(
    (linear1): Linear(in_features=509, out_features=512, bias=True)
    (norm1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU(inplace=True)
    (linear2): Linear(in_features=512, out_features=10, bias=True)
  )
)
01/29 09:37:01 PM | ----------------------------------------
01/29 09:37:01 PM | Performances input model:
01/29 09:37:01 PM |  - flops: 314,294,272
01/29 09:37:01 PM |  - params: 14,991,946
01/29 09:37:01 PM |  - accuracy: 93.95999908447266
01/29 09:37:01 PM | ----------------------------------------
01/29 09:37:01 PM | Performances pseudo-pruned model:
01/29 09:37:01 PM |  - flops: 314,294,272
01/29 09:37:01 PM |  - params: 14,991,946
01/29 09:37:01 PM |  - accuracy: 31.509998321533203
01/29 09:37:01 PM | ----------------------------------------
01/29 09:37:01 PM | Performances pruned model:
01/29 09:37:01 PM |  - flops: 108,630,784
01/29 09:37:01 PM |  - params: 6,444,568
01/29 09:37:01 PM |  - accuracy: 31.509998321533203
01/29 09:37:01 PM | ----------------------------------------
01/29 09:37:01 PM | Total time: 18.01s
