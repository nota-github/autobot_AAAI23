01/29 03:13:40 AM | args = Namespace(output_dir='result/rebuttal/nb_epoch/vgg/nbbtchs5/seed_01', loaded_model_path='./checkpoints/cifar10/vgg_16_bn.pt', resume=False, test_only=False, mode='prune', batch_size=64, nb_batches=5, Mflops_target=None, lr=0.6, momentum=0.9, beta=6, gamma=0.4, gpu='0', num_workers=4, dataset='cifar10', arch='vgg_16_bn', save_plot=False, seed=1, lr_finetuning=0.02, epoch_finetuning=200, wd=0.002, data_dir='./data/cifar10/', print_freq=200, num_classes=10, device_ids=[0], device=device(type='cuda', index=0), name_base='')
01/29 03:13:45 AM | ----------------------------------------
01/29 03:13:45 AM | ==> Building model...
01/29 03:13:45 AM | ----------------------------------------
01/29 03:13:45 AM | ==> Loading weights into the model...
01/29 03:13:45 AM | ----------------------------------------
01/29 03:13:45 AM | VGG(
  (features): Sequential(
    (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU(inplace=True)
    (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu3): ReLU(inplace=True)
    (conv4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu4): ReLU(inplace=True)
    (pool5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv6): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu6): ReLU(inplace=True)
    (conv7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu7): ReLU(inplace=True)
    (conv8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm8): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu8): ReLU(inplace=True)
    (pool9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv10): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm10): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu10): ReLU(inplace=True)
    (conv11): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm11): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu11): ReLU(inplace=True)
    (conv12): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm12): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu12): ReLU(inplace=True)
    (pool13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv14): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm14): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu14): ReLU(inplace=True)
    (conv15): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm15): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu15): ReLU(inplace=True)
    (conv16): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu16): ReLU(inplace=True)
  )
  (classifier): Sequential(
    (linear1): Linear(in_features=512, out_features=512, bias=True)
    (norm1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU(inplace=True)
    (linear2): Linear(in_features=512, out_features=10, bias=True)
  )
)
01/29 03:13:47 AM | Save modules info...
01/29 03:13:47 AM | FLOPS pruning ratio is 0.65
01/29 03:13:47 AM | Pruning with information flow
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: None
01/29 03:13:47 AM | cout: [0]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [0]
01/29 03:13:47 AM | cout: [0]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [0]
01/29 03:13:47 AM | cout: [0]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [0]
01/29 03:13:47 AM | cout: [1]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [1]
01/29 03:13:47 AM | cout: [1]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [1]
01/29 03:13:47 AM | cout: [1]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
01/29 03:13:47 AM | cin: [1]
01/29 03:13:47 AM | cout: [1]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [1]
01/29 03:13:47 AM | cout: [2]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [2]
01/29 03:13:47 AM | cout: [2]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [2]
01/29 03:13:47 AM | cout: [2]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [2]
01/29 03:13:47 AM | cout: [3]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [3]
01/29 03:13:47 AM | cout: [3]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [3]
01/29 03:13:47 AM | cout: [3]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
01/29 03:13:47 AM | cin: [3]
01/29 03:13:47 AM | cout: [3]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [3]
01/29 03:13:47 AM | cout: [4]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [4]
01/29 03:13:47 AM | cout: [4]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [4]
01/29 03:13:47 AM | cout: [4]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [4]
01/29 03:13:47 AM | cout: [5]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [5]
01/29 03:13:47 AM | cout: [5]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [5]
01/29 03:13:47 AM | cout: [5]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [5]
01/29 03:13:47 AM | cout: [6]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [6]
01/29 03:13:47 AM | cout: [6]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [6]
01/29 03:13:47 AM | cout: [6]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
01/29 03:13:47 AM | cin: [6]
01/29 03:13:47 AM | cout: [6]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [6]
01/29 03:13:47 AM | cout: [7]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [7]
01/29 03:13:47 AM | cout: [7]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [7]
01/29 03:13:47 AM | cout: [7]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [7]
01/29 03:13:47 AM | cout: [8]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [8]
01/29 03:13:47 AM | cout: [8]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [8]
01/29 03:13:47 AM | cout: [8]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [8]
01/29 03:13:47 AM | cout: [9]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [9]
01/29 03:13:47 AM | cout: [9]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [9]
01/29 03:13:47 AM | cout: [9]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
01/29 03:13:47 AM | cin: [9]
01/29 03:13:47 AM | cout: [9]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [9]
01/29 03:13:47 AM | cout: [10]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [10]
01/29 03:13:47 AM | cout: [10]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [10]
01/29 03:13:47 AM | cout: [10]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [10]
01/29 03:13:47 AM | cout: [11]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [11]
01/29 03:13:47 AM | cout: [11]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [11]
01/29 03:13:47 AM | cout: [11]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
01/29 03:13:47 AM | cin: [11]
01/29 03:13:47 AM | cout: [12]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
01/29 03:13:47 AM | cin: [12]
01/29 03:13:47 AM | cout: [12]
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: [12]
01/29 03:13:47 AM | cout: [12]
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Linear(in_features=512, out_features=512, bias=True)
01/29 03:13:47 AM | cin: [12]
01/29 03:13:47 AM | cout: None
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: ReLU(inplace=True)
01/29 03:13:47 AM | cin: None
01/29 03:13:47 AM | cout: None
01/29 03:13:47 AM | active
01/29 03:13:47 AM | -----
01/29 03:13:47 AM | module: Linear(in_features=512, out_features=10, bias=True)
01/29 03:13:47 AM | cin: None
01/29 03:13:47 AM | cout: None
01/29 03:13:47 AM | inactive
01/29 03:13:47 AM | Used masks: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
01/29 03:13:47 AM | 13 unique masks in total
01/29 03:13:47 AM | === Batch 1/5
01/29 03:13:47 AM | loss = 0.121 + 4.266 + 0.040 = 4.427
01/29 03:13:48 AM | attribution_score[0:12]: 
[ 0.94  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.83 ]
[ 0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.94 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.94 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.94  0.83  0.94  0.94  0.83  0.83 ]
[ 0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83  0.94  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83 ]
[ 0.83  0.83  0.83  0.83  0.83  0.83  0.83  0.94  0.83  0.83  0.83  0.83 ]
[ 0.94  0.94  0.94  0.83  0.94  0.94  0.83  0.94  0.83  0.94  0.94  0.83 ]

01/29 03:13:48 AM | === Batch 2/5
01/29 03:13:48 AM | loss = 0.130 + 3.498 + 0.058 = 3.685
01/29 03:13:48 AM | attribution_score[0:12]: 
[ 0.96  0.97  0.73  0.73  0.73  0.74  0.74  0.73  0.73  0.91  0.73  0.86 ]
[ 0.87  0.73  0.92  0.73  0.97  0.75  0.86  0.73  0.73  0.94  0.73  0.73 ]
[ 0.88  0.96  0.73  0.87  0.73  0.86  0.84  0.95  0.75  0.74  0.74  0.97 ]
[ 0.75  0.74  0.75  0.84  0.73  0.76  0.76  0.73  0.96  0.73  0.78  0.96 ]
[ 0.73  0.73  0.96  0.73  0.74  0.73  0.93  0.77  0.95  0.92  0.74  0.74 ]
[ 0.75  0.73  0.92  0.74  0.73  0.74  0.74  0.76  0.73  0.73  0.73  0.74 ]
[ 0.79  0.74  0.75  0.73  0.96  0.73  0.73  0.73  0.74  0.95  0.73  0.73 ]
[ 0.73  0.74  0.73  0.84  0.79  0.73  0.77  0.73  0.81  0.75  0.73  0.73 ]
[ 0.73  0.73  0.73  0.73  0.73  0.73  0.73  0.74  0.73  0.73  0.73  0.74 ]
[ 0.73  0.73  0.73  0.73  0.75  0.73  0.73  0.73  0.74  0.73  0.73  0.73 ]
[ 0.73  0.79  0.75  0.73  0.73  0.78  0.74  0.78  0.74  0.73  0.97  0.73 ]
[ 0.88  0.88  0.73  0.73  0.88  0.73  0.83  0.97  0.73  0.88  0.77  0.73 ]
[ 0.97  0.97  0.97  0.74  0.97  0.97  0.82  0.97  0.87  0.97  0.97  0.74 ]

01/29 03:13:48 AM | === Batch 3/5
01/29 03:13:48 AM | loss = 0.481 + 2.548 + 0.081 = 3.109
01/29 03:13:49 AM | attribution_score[0:12]: 
[ 0.98  0.97  0.60  0.60  0.61  0.61  0.62  0.60  0.60  0.87  0.61  0.87 ]
[ 0.84  0.60  0.89  0.60  0.97  0.67  0.85  0.60  0.70  0.95  0.60  0.61 ]
[ 0.91  0.97  0.60  0.90  0.61  0.90  0.81  0.95  0.64  0.63  0.62  0.97 ]
[ 0.66  0.62  0.77  0.87  0.72  0.76  0.65  0.60  0.97  0.60  0.69  0.97 ]
[ 0.60  0.65  0.96  0.64  0.71  0.74  0.89  0.75  0.96  0.89  0.63  0.63 ]
[ 0.64  0.79  0.88  0.63  0.61  0.62  0.65  0.65  0.61  0.60  0.60  0.72 ]
[ 0.77  0.62  0.73  0.64  0.97  0.61  0.61  0.60  0.63  0.97  0.77  0.61 ]
[ 0.60  0.62  0.60  0.82  0.71  0.66  0.73  0.60  0.81  0.65  0.60  0.60 ]
[ 0.60  0.61  0.60  0.60  0.61  0.60  0.60  0.61  0.63  0.60  0.61  0.76 ]
[ 0.62  0.60  0.60  0.60  0.64  0.63  0.60  0.60  0.63  0.60  0.61  0.62 ]
[ 0.60  0.84  0.80  0.61  0.60  0.72  0.78  0.83  0.61  0.69  0.98  0.61 ]
[ 0.92  0.92  0.74  0.79  0.93  0.73  0.88  0.98  0.65  0.92  0.82  0.62 ]
[ 0.98  0.98  0.98  0.61  0.98  0.98  0.87  0.98  0.92  0.98  0.98  0.62 ]

01/29 03:13:49 AM | === Batch 4/5
01/29 03:13:49 AM | loss = 0.751 + 1.667 + 0.102 = 2.521
01/29 03:13:49 AM | attribution_score[0:12]: 
[ 0.98  0.96  0.45  0.46  0.46  0.53  0.49  0.45  0.45  0.80  0.47  0.86 ]
[ 0.81  0.45  0.84  0.46  0.97  0.56  0.86  0.46  0.69  0.93  0.66  0.47 ]
[ 0.93  0.98  0.45  0.93  0.46  0.93  0.74  0.95  0.51  0.49  0.48  0.97 ]
[ 0.53  0.48  0.76  0.89  0.73  0.75  0.56  0.50  0.98  0.53  0.62  0.98 ]
[ 0.60  0.57  0.96  0.60  0.74  0.76  0.87  0.73  0.97  0.83  0.65  0.51 ]
[ 0.60  0.85  0.81  0.52  0.48  0.48  0.61  0.52  0.47  0.57  0.45  0.66 ]
[ 0.71  0.49  0.69  0.65  0.97  0.50  0.51  0.61  0.50  0.98  0.83  0.48 ]
[ 0.45  0.49  0.46  0.76  0.61  0.58  0.65  0.45  0.86  0.53  0.46  0.45 ]
[ 0.46  0.61  0.45  0.62  0.47  0.45  0.48  0.53  0.67  0.45  0.62  0.82 ]
[ 0.59  0.48  0.45  0.45  0.54  0.62  0.45  0.45  0.66  0.45  0.48  0.57 ]
[ 0.46  0.89  0.84  0.63  0.66  0.63  0.84  0.84  0.68  0.75  0.99  0.68 ]
[ 0.92  0.95  0.79  0.86  0.95  0.74  0.92  0.99  0.55  0.92  0.88  0.69 ]
[ 0.99  0.99  0.99  0.63  0.98  0.99  0.91  0.99  0.95  0.98  0.98  0.52 ]

01/29 03:13:49 AM | === Batch 5/5
01/29 03:13:49 AM | loss = 0.794 + 0.947 + 0.113 = 1.854
01/29 03:13:49 AM | attribution_score[0:12]: 
[ 0.99  0.96  0.32  0.32  0.33  0.46  0.37  0.31  0.31  0.76  0.33  0.88 ]
[ 0.81  0.33  0.77  0.32  0.97  0.43  0.90  0.33  0.66  0.90  0.71  0.37 ]
[ 0.95  0.98  0.31  0.94  0.32  0.95  0.64  0.95  0.37  0.36  0.34  0.97 ]
[ 0.40  0.34  0.74  0.90  0.66  0.77  0.50  0.47  0.98  0.51  0.55  0.98 ]
[ 0.66  0.46  0.94  0.56  0.73  0.81  0.85  0.69  0.97  0.78  0.71  0.49 ]
[ 0.56  0.86  0.72  0.40  0.36  0.40  0.66  0.43  0.36  0.60  0.31  0.65 ]
[ 0.73  0.42  0.67  0.60  0.97  0.41  0.41  0.61  0.47  0.98  0.88  0.42 ]
[ 0.31  0.41  0.34  0.67  0.51  0.47  0.54  0.31  0.88  0.41  0.33  0.32 ]
[ 0.38  0.62  0.31  0.67  0.43  0.31  0.38  0.43  0.74  0.36  0.68  0.87 ]
[ 0.60  0.36  0.31  0.31  0.42  0.60  0.31  0.31  0.73  0.31  0.35  0.53 ]
[ 0.40  0.93  0.84  0.69  0.73  0.65  0.89  0.88  0.76  0.81  0.99  0.76 ]
[ 0.90  0.97  0.83  0.90  0.96  0.77  0.94  0.99  0.43  0.90  0.92  0.77 ]
[ 0.99  0.99  0.99  0.71  0.99  0.99  0.93  0.99  0.97  0.98  0.98  0.40 ]

01/29 03:13:50 AM | ===
Best loss was 1.85 at iteration 5

01/29 03:13:50 AM | Looking for optimal threshold...
01/29 03:13:50 AM | Testing threshold 0.5
01/29 03:13:50 AM | Distance to target: 40,454,176
01/29 03:13:50 AM | Testing threshold 0.75
01/29 03:13:50 AM | Distance to target: 59,856,236
01/29 03:13:50 AM | Testing threshold 0.625
01/29 03:13:50 AM | Distance to target: 28,343,952
01/29 03:13:50 AM | Testing threshold 0.5625
01/29 03:13:50 AM | Distance to target: 6,562,968
01/29 03:13:50 AM | Testing threshold 0.53125
01/29 03:13:50 AM | Distance to target: 12,279,496
01/29 03:13:50 AM | Testing threshold 0.546875
01/29 03:13:50 AM | Distance to target: 2,703,176
01/29 03:13:50 AM | Testing threshold 0.5546875
01/29 03:13:50 AM | Distance to target: 2,093,040
01/29 03:13:50 AM | Testing threshold 0.55078125
01/29 03:13:50 AM | Distance to target: 317,600
01/29 03:13:50 AM | Testing threshold 0.552734375
01/29 03:13:50 AM | Distance to target: 641,312
01/29 03:13:50 AM | Testing threshold 0.5517578125
01/29 03:13:50 AM | Distance to target: 206,688
01/29 03:13:50 AM | Testing threshold 0.55126953125
01/29 03:13:50 AM | Distance to target: 317,600
01/29 03:13:50 AM | Testing threshold 0.551513671875
01/29 03:13:50 AM | Distance to target: 317,600
01/29 03:13:50 AM | Testing threshold 0.5516357421875
01/29 03:13:50 AM | Distance to target: 206,688
01/29 03:13:50 AM | Testing threshold 0.55157470703125
01/29 03:13:50 AM | Distance to target: 137,760
01/29 03:13:50 AM | Testing threshold 0.551605224609375
01/29 03:13:50 AM | Distance to target: 143,584
01/29 03:13:50 AM | Testing threshold 0.5515899658203125
01/29 03:13:50 AM | Distance to target: 2,912
01/29 03:13:51 AM | attribution_score[0:12]: 
[ 1.00  1.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  1.00 ]
[ 1.00  0.00  1.00  0.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00  0.00 ]
[ 1.00  1.00  0.00  1.00  0.00  1.00  1.00  1.00  0.00  0.00  0.00  1.00 ]
[ 0.00  0.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00 ]
[ 1.00  1.00  1.00  0.00  0.00  0.00  1.00  0.00  0.00  1.00  0.00  1.00 ]
[ 1.00  0.00  1.00  1.00  1.00  0.00  0.00  1.00  0.00  1.00  1.00  0.00 ]
[ 0.00  0.00  0.00  1.00  1.00  1.00  1.00  0.00  1.00  0.00  0.00  0.00 ]
[ 0.00  1.00  0.00  1.00  0.00  0.00  0.00  0.00  1.00  0.00  1.00  1.00 ]
[ 1.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  1.00  0.00  0.00  1.00 ]
[ 0.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00  1.00  1.00  1.00 ]
[ 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  0.00 ]

01/29 03:13:51 AM | VGG(
  (features): Sequential(
    (conv0): Conv2d(3, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm0): BatchNorm2d(22, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (conv1): Conv2d(22, 49, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm1): BatchNorm2d(49, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU(inplace=True)
    (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv3): Conv2d(49, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm3): BatchNorm2d(84, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu3): ReLU(inplace=True)
    (conv4): Conv2d(84, 108, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm4): BatchNorm2d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu4): ReLU(inplace=True)
    (pool5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv6): Conv2d(108, 155, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm6): BatchNorm2d(155, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu6): ReLU(inplace=True)
    (conv7): Conv2d(155, 136, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm7): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu7): ReLU(inplace=True)
    (conv8): Conv2d(136, 156, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm8): BatchNorm2d(156, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu8): ReLU(inplace=True)
    (pool9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv10): Conv2d(156, 204, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm10): BatchNorm2d(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu10): ReLU(inplace=True)
    (conv11): Conv2d(204, 140, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm11): BatchNorm2d(140, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu11): ReLU(inplace=True)
    (conv12): Conv2d(140, 234, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm12): BatchNorm2d(234, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu12): ReLU(inplace=True)
    (pool13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (conv14): Conv2d(234, 408, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm14): BatchNorm2d(408, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu14): ReLU(inplace=True)
    (conv15): Conv2d(408, 487, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm15): BatchNorm2d(487, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu15): ReLU(inplace=True)
    (conv16): Conv2d(487, 502, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (norm16): BatchNorm2d(502, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu16): ReLU(inplace=True)
  )
  (classifier): Sequential(
    (linear1): Linear(in_features=502, out_features=512, bias=True)
    (norm1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU(inplace=True)
    (linear2): Linear(in_features=512, out_features=10, bias=True)
  )
)
01/29 03:13:53 AM | ----------------------------------------
01/29 03:13:53 AM | Performances input model:
01/29 03:13:53 AM |  - flops: 314,294,272
01/29 03:13:53 AM |  - params: 14,991,946
01/29 03:13:53 AM |  - accuracy: 93.95999908447266
01/29 03:13:53 AM | ----------------------------------------
01/29 03:13:53 AM | Performances pseudo-pruned model:
01/29 03:13:53 AM |  - flops: 314,294,272
01/29 03:13:53 AM |  - params: 14,991,946
01/29 03:13:53 AM |  - accuracy: 33.88999938964844
01/29 03:13:53 AM | ----------------------------------------
01/29 03:13:53 AM | Performances pruned model:
01/29 03:13:53 AM |  - flops: 108,495,908
01/29 03:13:53 AM |  - params: 6,618,131
01/29 03:13:53 AM |  - accuracy: 33.88999938964844
01/29 03:13:53 AM | ----------------------------------------
01/29 03:13:53 AM | Total time: 13.04s
